<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<title>Board_c</title>
</head>

<body>

<table border="0" cellspacing="1" width="100%" id="AutoNumber1"  bgcolor="#CCCCFF">
  <tr>
    <td width="100%">
    <table border="0" cellspacing="1" width="100%" id="AutoNumber2">
      <tr>
        <td width="*">
        <h2 align="center">Board_c</h2>
        </td>
        <td width="25%">
        <p align="center"><a href="/index.html">на главную страницу</a></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">

        

        <p align="justify">
        //////////////////////////////////////////////////////////////////////////<br>
        // Инициализация позиции из строки FEN<br>
        void board_from_fen(const char fen[])<br>
        { int pos, i, j;<br>
        char c;<br>
        <br>
        memset(Board, 0, sizeof(struct board_t));<br>
        pos = 0;<br>
        c = fen[pos];<br>
        for (i = 56; i &gt;= 0; i-=8) {<br>
        for (j = 0; j &lt;= 7; ) {<br>
        if (c &lt;= '8') j += c - '0';<br>
        else { Board-&gt;square[i+j] = PieceFromChar[c]; j++; }<br>
        c = fen[++pos];<br>
        }<br>
        c = fen[++pos];<br>
        }<br>
        if (c == 'b') Board-&gt;turn = 1;<br>
        c = fen[++pos]; c = fen[++pos];<br>
        if (c == '-') c = fen[++pos];<br>
        if (c == 'K') { Board-&gt;flags |= 1; c = fen[++pos]; }<br>
        if (c == 'Q') { Board-&gt;flags |= 2; c = fen[++pos]; }<br>
        if (c == 'k') { Board-&gt;flags |= 4; c = fen[++pos]; }<br>
        if (c == 'q') { Board-&gt;flags |= 8; c = fen[++pos]; }<br>
        c = fen[++pos];<br>
        if (c != '-') {<br>
        i = c + fen[++pos] * 8 - 489;<br>
        j = i ^ 8;<br>
        if (Board-&gt;square[i] != 0) i = 0;<br>
        else if (Board-&gt;square[j] != (3-Board-&gt;turn)) i = 0;<br>
        else if (Board-&gt;square[j-1] != (Board-&gt;turn+2) &amp;&amp; Board-&gt;square[j+1] != 
        (Board-&gt;turn+2)) i = 0;<br>
        Board-&gt;ep_square = i;<br>
        }<br>
        board_init(Board);<br>
        }<br>
        ///////////////////////////////////////////////////////////////////////////<br>
        // Инициализация структуры Board<br>
        void board_init(struct board_t * board)<br>
        { int i, square, piece;<br>
        unsigned __int64 key;<br>
        <br>
        // Оценки положений фигур по типам и координатам<br>
        board-&gt;opening = 0;<br>
        board-&gt;endgame = 0;<br>
        for (square = 0; square &lt; 64; square++) {<br>
        piece = board-&gt;square[square];<br>
        if (piece != 0) {<br>
        board-&gt;opening += PieceSquareValue[piece - 2][square][0];<br>
        board-&gt;endgame += PieceSquareValue[piece - 2][square][1];<br>
        }<br>
        }<br>
        // Битовые строки<br>
        for (i = 0; i &lt; 14; i++) board-&gt;mp[i] = 0;<br>
        board-&gt;md1 = 0; board-&gt;md2 = 0; board-&gt;md3 = 0; board-&gt;md4 = 0;<br>
        for (square = 0; square &lt; 64; square++) {<br>
        piece = board-&gt;square[square];<br>
        if (piece != 0) {<br>
        key = (unsigned __int64)1 &lt;&lt; square;<br>
        board-&gt;mp[piece &amp; 1] |= key;<br>
        board-&gt;mp[piece] |= key;<br>
        board-&gt;md1 |= key;<br>
        board-&gt;md2 |= MaskSetMD2[square];<br>
        board-&gt;md3 |= MaskSetMD3[square];<br>
        board-&gt;md4 |= MaskSetMD4[square];<br>
        }<br>
        }<br>
        // Хэш-коды позиции<br>
        board-&gt;key = 0;<br>
        for (square = 0; square &lt; 64; square++) {<br>
        piece = board-&gt;square[square];<br>
        if (piece != 0) board-&gt;key ^= Random[piece-2][square];<br>
        }<br>
        board-&gt;key ^= RandomCastle[board-&gt;flags];<br>
        if (board-&gt;ep_square != 0) board-&gt;key ^= RandomEP[board-&gt;ep_square &amp; 7];<br>
        if (board-&gt;turn) board-&gt;key ^= 0;<br>
        else board-&gt;key ^= RandomTurn;<br>
        // Хэш-код пешечной структуры<br>
        board-&gt;pawn_key = Random[0][0];<br>
        for (square = 0; square &lt; 64; square++) {<br>
        piece = board-&gt;square[square];<br>
        if (PIECE_IS_PAWN(piece)) board-&gt;pawn_key ^= Random[piece-2][square];<br>
        }<br>
        // Сумма материала<br>
        board-&gt;mat_summ =<br>
        popcnt(board-&gt;mp[WhiteQueen]) +<br>
        popcnt(board-&gt;mp[BlackQueen]) * 2 +<br>
        popcnt(board-&gt;mp[WhiteRook]) * 2*2 +<br>
        popcnt(board-&gt;mp[BlackRook]) * 2*2*3 +<br>
        popcnt(board-&gt;mp[WhiteBishop]) * 2*2*3*3 +<br>
        popcnt(board-&gt;mp[BlackBishop]) * 2*2*3*3*3 +<br>
        popcnt(board-&gt;mp[WhiteKnight]) * 2*2*3*3*3*3 +<br>
        popcnt(board-&gt;mp[BlackKnight]) * 2*2*3*3*3*3*3 +<br>
        popcnt(board-&gt;mp[WhitePawn]) * 2*2*3*3*3*3*3*3 +<br>
        popcnt(board-&gt;mp[BlackPawn]) * 2*2*3*3*3*3*3*3*9;<br>
        // Разность материала<br>
        board-&gt;mat_diff =<br>
        (popcnt(board-&gt;mp[WhiteQueen]) - popcnt(board-&gt;mp[BlackQueen])) * 10 +<br>
        (popcnt(board-&gt;mp[WhiteRook]) - popcnt(board-&gt;mp[BlackRook])) * 5 +<br>
        (popcnt(board-&gt;mp[WhiteBishop]) - popcnt(board-&gt;mp[BlackBishop])) * 3 +<br>
        (popcnt(board-&gt;mp[WhiteKnight]) - popcnt(board-&gt;mp[BlackKnight])) * 3 +<br>
        (popcnt(board-&gt;mp[WhitePawn]) - popcnt(board-&gt;mp[BlackPawn]));<br>
        }<br>
        ///////////////////////////////////////////////////////////////////////////<br>
        static int popcnt(unsigned __int64 v)<br>
        { unsigned int v1, v2;<br>
        <br>
        v1 = (unsigned int)(v &amp; 0xFFFFFFFF);<br>
        v1 -= (v1 &gt;&gt; 1) &amp; 0x55555555;<br>
        v1 = (v1 &amp; 0x33333333) + ((v1 &gt;&gt; 2) &amp; 0x33333333);<br>
        v1 = (v1 + (v1 &gt;&gt; 4)) &amp; 0x0F0F0F0F;<br>
        v2 = (unsigned int)(v &gt;&gt; 32);<br>
        v2 -= (v2 &gt;&gt; 1) &amp; 0x55555555;<br>
        v2 = (v2 &amp; 0x33333333) + ((v2 &gt;&gt; 2) &amp; 0x33333333);<br>
        v2 = (v2 + (v2 &gt;&gt; 4)) &amp; 0x0F0F0F0F;<br>
        return ((v1 * 0x01010101) &gt;&gt; 24) + ((v2 * 0x01010101) &gt;&gt; 24);<br>
        }<br>
        /////////////////////////////////////////////////////////////////////////////<br>
        // Инициализация битовых масок<br>
        #define Rank(x) ((x)&gt;&gt;3)<br>
        #define File(x) ((x)&amp;7)<br>
        <br>
        int line_attack(int file, int zapoln)<br>
        { int i, att = 0;<br>
        <br>
        if (file &lt; 7) for (i = 1 &lt;&lt; (file + 1); i &lt; 256; i &lt;&lt;= 1) {<br>
        att |= i;<br>
        if (zapoln &amp; i) break;<br>
        }<br>
        if (file &gt; 0) for (i = 1 &lt;&lt; (file - 1); i &gt; 0; i &gt;&gt;= 1) {<br>
        att |= i;<br>
        if (zapoln &amp; i) break;<br>
        }<br>
        return att;<br>
        }<br>
        <br>
        const char setmd3[64] = {<br>
        0, 2, 5, 9,14,20,27,35,<br>
        1, 4, 8,13,19,26,34,42,<br>
        3, 7,12,18,25,33,41,48,<br>
        6,11,17,24,32,40,47,53,<br>
        10,16,23,31,39,46,52,57,<br>
        15,22,30,38,45,51,56,60,<br>
        21,29,37,44,50,55,59,62,<br>
        28,36,43,49,54,58,61,63<br>
        };<br>
        const char setmd4[64] = {<br>
        28,21,15,10, 6, 3, 1, 0,<br>
        36,29,22,16,11, 7, 4, 2,<br>
        43,37,30,23,17,12, 8, 5,<br>
        49,44,38,31,24,18,13, 9,<br>
        54,50,45,39,32,25,19,14,<br>
        58,55,51,46,40,33,26,20,<br>
        61,59,56,52,47,41,34,27,<br>
        63,62,60,57,53,48,42,35<br>
        };<br>
        <br>
        void init_bitboards()<br>
        { int i, j, k, sq, shift, att, Rank1, File1, File2;<br>
        int knightmoves[8] = {-17,-15,-10,-6,6,10,15,17};<br>
        <br>
        for (i = 0; i &lt; 256; i++) PieceFromChar[i] = 0;<br>
        PieceFromChar[ 66] = 6;<br>
        PieceFromChar[ 75] = 12;<br>
        PieceFromChar[ 78] = 4;<br>
        PieceFromChar[ 80] = 2;<br>
        PieceFromChar[ 81] = 10;<br>
        PieceFromChar[ 82] = 8;<br>
        PieceFromChar[ 98] = 7;<br>
        PieceFromChar[107] = 13;<br>
        PieceFromChar[110] = 5;<br>
        PieceFromChar[112] = 3;<br>
        PieceFromChar[113] = 11;<br>
        PieceFromChar[114] = 9;<br>
        BsfByte[0] = 0;<br>
        for (i = 0; i &lt; 256; i++) {<br>
        for (j = 0; j &lt; 8; j++) {<br>
        if (i &amp; (1 &lt;&lt; j)) {<br>
        BsfByte[i] = (unsigned char)j;<br>
        break;<br>
        }<br>
        }<br>
        }<br>
        for (i = 0; i &lt; 64; i++) for (j = 0; j &lt; 64; j++) {<br>
        Distance[i][j] = max(abs(File(i) - File(j)),abs(Rank(i) - Rank(j)));<br>
        if (i == j) LineIndex[i][j] = 9;<br>
        else if (Rank(i) == Rank(j)) LineIndex[i][j] = 2;<br>
        else if (File(i) == File(j)) LineIndex[i][j] = 3;<br>
        else if (File(i) - File(j) == Rank(i) - Rank(j)) LineIndex[i][j] = 1;<br>
        else if (File(i) - File(j) == Rank(j) - Rank(i)) LineIndex[i][j] = 0;<br>
        else LineIndex[i][j] = 9;<br>
        }<br>
        for (i = 0; i &lt; 64; i++) { // по полям<br>
        for (j = 0; j &lt; 64; j++) { // по вариантам заполнения линии фигурами<br>
        LineMask[0][i][j] = 0;<br>
        LineMask[1][i][j] = 0;<br>
        LineMask[2][i][j] = 0;<br>
        LineMask[3][i][j] = 0;<br>
        // заполняем из att горизонталь, проходящую через i, слева направо<br>
        att = line_attack(File(i), j &lt;&lt; 1); // получили строку атак (8 бит)<br>
        for (k = 0, sq = Rank(i) * 8; k &lt; 8; k++, sq++)<br>
        if (att &amp; (1 &lt;&lt; k)) LineMask[2][i][j] |= (unsigned __int64)1 &lt;&lt; sq;<br>
        // а теперь вертикаль - сверху вниз<br>
        att = line_attack(7 - Rank(i), j &lt;&lt; 1);<br>
        for (k = 0, sq = File(i) + 56; k &lt; 8; k++, sq -= 8)<br>
        if (att &amp; (1 &lt;&lt; k)) LineMask[3][i][j] |= (unsigned __int64)1 &lt;&lt; sq;<br>
        // диагональ сверху справа влево вниз<br>
        if (Rank(i) + File(i) &lt;= 7) sq = File(i); else sq = 7 - Rank(i);<br>
        att = line_attack(sq, j &lt;&lt; 1);<br>
        if (Rank(i) + File(i) &lt;= 7) sq = i + 7 * File(i);<br>
        else sq = i + 7 * (7 - Rank(i));<br>
        for (k = 0; k &lt; 8; k++, sq -= 7) {<br>
        if (att &amp; (1 &lt;&lt; k)) LineMask[0][i][j] |= (unsigned __int64)1 &lt;&lt; sq;<br>
        if (File(sq) == 7 || Rank(sq) == 0) break;<br>
        }<br>
        // диагональ снизу справа вверх влево<br>
        if (File(i) &gt; Rank(i)) sq = Rank(i); else sq = File(i);<br>
        att = line_attack(sq, j &lt;&lt; 1);<br>
        if (File(i) &gt; Rank(i)) sq = i - 9 * Rank(i);<br>
        else sq = i - 9 * File(i);<br>
        for (k = 0; k &lt; 8; k++, sq += 9) {<br>
        if (att &amp; (1 &lt;&lt; k)) LineMask[1][i][j] |= (unsigned __int64)1 &lt;&lt; sq;<br>
        if (File(sq) == 7 || Rank(sq) == 7) break;<br>
        }<br>
        }<br>
        }<br>
        for (i = 0; i &lt; 64; i++) for (j = 0; j &lt; 64; j++) {<br>
        MaskEvasionMoves[i][j][1] = 0xFFFFFFFFFFFFFFFF;<br>
        MaskEvasionMoves[i][j][0] = (unsigned __int64)1 &lt;&lt; j;<br>
        if (LineIndex[i][j] &lt; 9) {<br>
        sq = i;<br>
        if (File(j) &gt; File(i) &amp;&amp; File(i) &gt; 0) sq -= 1;<br>
        if (File(j) &lt; File(i) &amp;&amp; File(i) &lt; 7) sq += 1;<br>
        if (Rank(j) &gt; Rank(i) &amp;&amp; Rank(i) &gt; 0) sq -= 8;<br>
        if (Rank(j) &lt; Rank(i) &amp;&amp; Rank(i) &lt; 7) sq += 8;<br>
        if (LineIndex[i][j] == LineIndex[i][sq])<br>
        MaskEvasionMoves[i][j][1] ^= (unsigned __int64)1 &lt;&lt; sq;<br>
        shift = 0;<br>
        if (File(j) &gt; File(i)) {<br>
        if (Rank(j) &gt; Rank(i)) shift = 9;<br>
        else if (Rank(j) == Rank(i)) shift = 1;<br>
        else if (Rank(j) &lt; Rank(i)) shift = -7;<br>
        }<br>
        else if (File(j) == File(i)) {<br>
        if (Rank(j) &gt; Rank(i)) shift = 8;<br>
        else shift = -8;<br>
        }<br>
        else {<br>
        if (Rank(j) &gt; Rank(i)) shift = 7;<br>
        else if (Rank(j) == Rank(i)) shift = -1;<br>
        else if (Rank(j) &lt; Rank(i)) shift = -9;<br>
        }<br>
        for (sq = i + shift; sq != j; sq += shift)<br>
        MaskEvasionMoves[i][j][0] |= (unsigned __int64)1 &lt;&lt; sq;<br>
        }<br>
        }<br>
        for (i = 0; i &lt; 64; i++) {<br>
        MaskPawnDoubled[i] = 0;<br>
        for (sq = File(i); sq &lt; 64; sq += 8)<br>
        if (sq != i) MaskPawnDoubled[i] |= (unsigned __int64)1 &lt;&lt; sq;<br>
        MaskPawnIsolated[i] = 0;<br>
        if (File(i) &gt; 0) for (sq = File(i) - 1; sq &lt; 64; sq += 8)<br>
        MaskPawnIsolated[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (File(i) &lt; 7) for (sq = File(i) + 1; sq &lt; 64; sq += 8)<br>
        MaskPawnIsolated[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        MaskPawnProtectedW[i] = 0;<br>
        if (File(i) &gt; 0) for (sq = File(i) - 1; sq &lt; 64; sq += 8) {<br>
        MaskPawnProtectedW[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (Rank(sq) == Rank(i)) break;<br>
        }<br>
        if (File(i) &lt; 7) for (sq = File(i) + 1; sq &lt; 64; sq += 8) {<br>
        MaskPawnProtectedW[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (Rank(sq) == Rank(i)) break;<br>
        }<br>
        MaskPawnProtectedB[i] = 0;<br>
        if (File(i) &gt; 0) for (sq = Rank(i) * 8 + File(i) - 1; sq &lt; 64; sq += 8)<br>
        MaskPawnProtectedB[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (File(i) &lt; 7) for (sq = Rank(i) * 8 + File(i) + 1; sq &lt; 64; sq += 8)<br>
        MaskPawnProtectedB[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        MaskPawnAttacksW1[i] = 0;<br>
        if (Rank(i) &lt; 6) {<br>
        if (File(i) &gt; 0) MaskPawnAttacksW1[i] |= (unsigned __int64)1 &lt;&lt; (i + 
        15);<br>
        if (File(i) &lt; 7) MaskPawnAttacksW1[i] |= (unsigned __int64)1 &lt;&lt; (i + 
        17);<br>
        }<br>
        MaskPawnAttacksB1[i] = 0;<br>
        if (Rank(i) &gt; 1) {<br>
        if (File(i) &gt; 0) MaskPawnAttacksB1[i] |= (unsigned __int64)1 &lt;&lt; (i - 
        17);<br>
        if (File(i) &lt; 7) MaskPawnAttacksB1[i] |= (unsigned __int64)1 &lt;&lt; (i - 
        15);<br>
        }<br>
        MaskPawnAttacksW2[i] = 0;<br>
        if (Rank(i) &lt; 5) {<br>
        if (File(i) &gt; 0) MaskPawnAttacksW2[i] |= (unsigned __int64)1 &lt;&lt; (i + 
        23);<br>
        if (File(i) &lt; 7) MaskPawnAttacksW2[i] |= (unsigned __int64)1 &lt;&lt; (i + 
        25);<br>
        }<br>
        MaskPawnAttacksB2[i] = 0;<br>
        if (Rank(i) &gt; 2) {<br>
        if (File(i) &gt; 0) MaskPawnAttacksB2[i] |= (unsigned __int64)1 &lt;&lt; (i - 
        25);<br>
        if (File(i) &lt; 7) MaskPawnAttacksB2[i] |= (unsigned __int64)1 &lt;&lt; (i - 
        23);<br>
        }<br>
        MaskPawnPassedW[i] = 0;<br>
        for (sq = i + 8; sq &lt; 64; sq += 8)<br>
        MaskPawnPassedW[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (File(i) &gt; 0) for (sq = i + 7; sq &lt; 64; sq += 8)<br>
        MaskPawnPassedW[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (File(i) &lt; 7) for (sq = i + 9; sq &lt; 64; sq += 8)<br>
        MaskPawnPassedW[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        MaskPawnPassedB[i] = 0;<br>
        for (sq = i - 8; sq &gt;= 0; sq -= 8)<br>
        MaskPawnPassedB[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (File(i) &gt; 0) for (sq = i - 9; sq &gt;= 0; sq -= 8)<br>
        MaskPawnPassedB[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        if (File(i) &lt; 7) for (sq = i - 7; sq &gt;= 0; sq -= 8)<br>
        MaskPawnPassedB[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        MaskPawnOpenFileW[i] = 0;<br>
        for (sq = i + 8; sq &lt; 64; sq += 8)<br>
        MaskPawnOpenFileW[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        MaskPawnOpenFileB[i] = 0;<br>
        for (sq = i - 8; sq &gt;= 0; sq -= 8)<br>
        MaskPawnOpenFileB[i] |= (unsigned __int64)1&lt;&lt; sq;<br>
        MaskPawnAttacks[0][i] = 0;<br>
        if (Rank(i) &lt; 7) {<br>
        if (File(i) &gt; 0) MaskPawnAttacks[0][i] |= (unsigned __int64)1 &lt;&lt; (i + 
        7);<br>
        if (File(i) &lt; 7) MaskPawnAttacks[0][i] |= (unsigned __int64)1 &lt;&lt; (i + 
        9);<br>
        }<br>
        MaskPawnAttacks[1][i] = 0;<br>
        if (Rank(i) &gt; 0) {<br>
        if (File(i) &gt; 0) MaskPawnAttacks[1][i] |= (unsigned __int64)1 &lt;&lt; (i - 
        9);<br>
        if (File(i) &lt; 7) MaskPawnAttacks[1][i] |= (unsigned __int64)1 &lt;&lt; (i - 
        7);<br>
        }<br>
        MaskClearSquare[i] = 0xFFFFFFFFFFFFFFFF ^ ((unsigned __int64)1 &lt;&lt; i);<br>
        MaskKnightMoves[i] = 0;<br>
        for (j = 0; j &lt; 8; j++) {<br>
        sq = i + knightmoves[j];<br>
        if (sq&gt;=0 &amp;&amp; sq&lt;64 &amp;&amp; abs(Rank(i)-Rank(sq))&lt;=2 &amp;&amp; abs(File(i)-File(sq))&lt;=2)<br>
        MaskKnightMoves[i] |= (unsigned __int64)1 &lt;&lt; sq;<br>
        }<br>
        MaskKingMoves[i] = 0;<br>
        for (j = 0; j &lt; 64; j++) if (Distance[i][j] == 1)<br>
        MaskKingMoves[i] |= (unsigned __int64)1 &lt;&lt; j;<br>
        sq = File(i) * 8 + (7 - Rank(i));<br>
        MaskSetMD2[i] = (unsigned __int64)1 &lt;&lt; sq;<br>
        MaskClearMD2[i] = 0xFFFFFFFFFFFFFFFF ^ (unsigned __int64)1 &lt;&lt; sq;<br>
        sq = setmd3[i];<br>
        MaskSetMD3[i] = (unsigned __int64)1 &lt;&lt; sq;<br>
        MaskClearMD3[i] = 0xFFFFFFFFFFFFFFFF ^ (unsigned __int64)1 &lt;&lt; sq;<br>
        sq = setmd4[i];<br>
        MaskSetMD4[i] = (unsigned __int64)1 &lt;&lt; sq;<br>
        MaskClearMD4[i] = 0xFFFFFFFFFFFFFFFF ^ (unsigned __int64)1 &lt;&lt; sq;<br>
        WhitePawnMoves1[i] = 0;<br>
        if (Rank(i) &lt; 7) WhitePawnMoves1[i] |= (unsigned __int64)1 &lt;&lt; (i + 8);<br>
        BlackPawnMoves1[i] = 0;<br>
        if (Rank(i) &gt; 0) BlackPawnMoves1[i] |= (unsigned __int64)1 &lt;&lt; (i - 8);<br>
        WhitePawnMoves2[i] = 0;<br>
        if (Rank(i) == 1) WhitePawnMoves2[i] |= (unsigned __int64)1 &lt;&lt; (i + 16);<br>
        BlackPawnMoves2[i] = 0;<br>
        if (Rank(i) == 6) BlackPawnMoves2[i] |= (unsigned __int64)1 &lt;&lt; (i - 16);<br>
        WhitePawnCaptures1[i] = 0;<br>
        if (Rank(i) &gt; 0 &amp;&amp; File(i) &gt; 0) WhitePawnCaptures1[i] |= (unsigned 
        __int64)1 &lt;&lt; (i - 9);<br>
        BlackPawnCaptures1[i] = 0;<br>
        if (Rank(i) &lt; 7 &amp;&amp; File(i) &gt; 0) BlackPawnCaptures1[i] |= (unsigned 
        __int64)1 &lt;&lt; (i + 7);<br>
        WhitePawnCaptures2[i] = 0;<br>
        if (Rank(i) &gt; 0 &amp;&amp; File(i) &lt; 7) WhitePawnCaptures2[i] |= (unsigned 
        __int64)1 &lt;&lt; (i - 7);<br>
        BlackPawnCaptures2[i] = 0;<br>
        if (Rank(i) &lt; 7 &amp;&amp; File(i) &lt; 7) BlackPawnCaptures2[i] |= (unsigned 
        __int64)1 &lt;&lt; (i + 9);<br>
        MaskLines[i] = 0xFFFFFFFFFFFFFFFF ^ ((unsigned __int64)1 &lt;&lt; i);<br>
        if (File(i) &gt; 0) for (sq = i - 1;; sq--) {<br>
        MaskLines[i] ^= (unsigned __int64) 1 &lt;&lt; sq;<br>
        if (File(sq) == 0) break;<br>
        }<br>
        if (File(i) &lt; 7) for (sq = i + 1;; sq++) {<br>
        MaskLines[i] ^= (unsigned __int64) 1 &lt;&lt; sq;<br>
        if (File(sq) == 7) break;<br>
        }<br>
        if (Rank(i) &gt; 0) for (sq = i - 8;; sq -= 8) {<br>
        MaskLines[i] ^= (unsigned __int64) 1 &lt;&lt; sq;<br>
        if (Rank(sq) == 0) break;<br>
        }<br>
        if (Rank(i) &lt; 7) for (sq = i + 8;; sq += 8) {<br>
        MaskLines[i] ^= (unsigned __int64) 1 &lt;&lt; sq;<br>
        if (Rank(sq) == 7) break;<br>
        }<br>
        MaskDiags[i] = 0xFFFFFFFFFFFFFFFF ^ ((unsigned __int64)1 &lt;&lt; i);<br>
        if (File(i) &gt; 0 &amp;&amp; Rank(i) &gt; 0) for (sq = i - 9;; sq -= 9) {<br>
        MaskDiags[i] ^= (unsigned __int64)1 &lt;&lt; sq;<br>
        if (File(sq) == 0 || Rank(sq) == 0) break;<br>
        }<br>
        if (File(i) &gt; 0 &amp;&amp; Rank(i) &lt; 7) for (sq = i + 7;; sq += 7) {<br>
        MaskDiags[i] ^= (unsigned __int64)1 &lt;&lt; sq;<br>
        if (File(sq) == 0 || Rank(sq) == 7) break;<br>
        }<br>
        if (File(i) &lt; 7 &amp;&amp; Rank(i) &gt; 0) for (sq = i - 7;; sq -= 7) {<br>
        MaskDiags[i] ^= (unsigned __int64)1 &lt;&lt; sq;<br>
        if (File(sq) == 7 || Rank(sq) == 0) break;<br>
        }<br>
        if (File(i) &lt; 7 &amp;&amp; Rank(i) &lt; 7) for (sq = i + 9;; sq += 9) {<br>
        MaskDiags[i] ^= (unsigned __int64)1 &lt;&lt; sq;<br>
        if (File(sq) == 7 || Rank(sq) == 7) break;<br>
        }<br>
        WhiteKingOpp[i] = 0;<br>
        if (Rank(i) &gt; 3) {<br>
        if (File(i) == 0) {<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 49;<br>
        if (Rank(i) &gt; 4) WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 57;<br>
        }<br>
        else if (File(i) == 7) {<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 54;<br>
        if (Rank(i) &gt; 4) WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 62;<br>
        }<br>
        else {<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 47);<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 48);<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 49);<br>
        if (Rank(i) &gt; 4) {<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 55);<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 56);<br>
        WhiteKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 57);<br>
        }<br>
        }<br>
        }<br>
        BlackKingOpp[i] = 0;<br>
        if (Rank(i) &lt; 4) {<br>
        if (File(i) == 0) {<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 9;<br>
        if (Rank(i) &lt; 3) BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 1;<br>
        }<br>
        else if (File(i) == 7) {<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 14;<br>
        if (Rank(i) &lt; 3) BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; 6;<br>
        }<br>
        else {<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 7);<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 8);<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 9);<br>
        if (Rank(i) &lt; 3) {<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) - 1);<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i));<br>
        BlackKingOpp[i] |= (unsigned __int64)1 &lt;&lt; (File(i) + 1);<br>
        }<br>
        }<br>
        }<br>
        QuadBlackKing[i][0] = 0;<br>
        QuadBlackKing[i][1] = 0;<br>
        Rank1 = Rank(i);<br>
        if (Rank1 != 0 &amp;&amp; Rank1 != 7) {<br>
        QuadBlackKing[i][0] = 0xFFFFFFFFFFFFFFFF;<br>
        if (Rank1 == 1) Rank1++;<br>
        File1 = File(i) - (7 - Rank1);<br>
        if (File1 &lt; 0) File1 = 0;<br>
        File2 = File(i) + (7 - Rank1);<br>
        if (File2 &gt; 7) File2 = 7;<br>
        for (; Rank1 &lt; 8; Rank1++) for (j = File1; j &lt;= File2; j++)<br>
        QuadBlackKing[i][0] ^= (unsigned __int64)1 &lt;&lt; (Rank1 * 8 + j);<br>
        QuadBlackKing[i][1] = 0xFFFFFFFFFFFFFFFF;<br>
        Rank1 = Rank(i) - 1;<br>
        if (Rank1 == 0) Rank1++;<br>
        File1 = File(i) - (7 - Rank1);<br>
        if (File1 &lt; 0) File1 = 0;<br>
        File2 = File(i) + (7 - Rank1);<br>
        if (File2 &gt; 7) File2 = 7;<br>
        for (; Rank1 &lt; 8; Rank1++) for (j = File1; j &lt;= File2; j++)<br>
        QuadBlackKing[i][1] ^= (unsigned __int64)1 &lt;&lt; (Rank1 * 8 + j);<br>
        }<br>
        QuadWhiteKing[i][0] = 0;<br>
        QuadWhiteKing[i][1] = 0;<br>
        Rank1 = Rank(i);<br>
        if (Rank1 != 0 &amp;&amp; Rank1 != 7) {<br>
        QuadWhiteKing[i][0] = 0xFFFFFFFFFFFFFFFF;<br>
        Rank1++;<br>
        if (Rank1 == 7) Rank1--;<br>
        File1 = File(i) - Rank1;<br>
        if (File1 &lt; 0) File1 = 0;<br>
        File2 = File(i) + Rank1;<br>
        if (File2 &gt; 7) File2 = 7;<br>
        for (; Rank1 &gt;= 0; Rank1--) for (j = File1; j &lt;= File2; j++)<br>
        QuadWhiteKing[i][0] ^= (unsigned __int64)1 &lt;&lt; (Rank1 * 8 + j);<br>
        QuadWhiteKing[i][1] = 0xFFFFFFFFFFFFFFFF;<br>
        Rank1 = Rank(i);<br>
        if (Rank1 == 6) Rank1--;<br>
        File1 = File(i) - Rank1;<br>
        if (File1 &lt; 0) File1 = 0;<br>
        File2 = File(i) + Rank1;<br>
        if (File2 &gt; 7) File2 = 7;<br>
        for (; Rank1 &gt;= 0; Rank1--) for (j = File1; j &lt;= File2; j++)<br>
        QuadWhiteKing[i][1] ^= (unsigned __int64)1 &lt;&lt; (Rank1 * 8 + j);<br>
        }<br>
        }<br>
        }<br>
        <br>
        #define PAWN_SCORE_SIZE 125<br>
        <br>
        struct {<br>
        unsigned __int16 mask;<br>
        unsigned __int16 bits;<br>
        __int16 score0;<br>
        __int16 score1;<br>
        } pawnscore[PAWN_SCORE_SIZE] = {<br>
        {0xFFF,0x000,4484, 0}, {0x007,0x007, 794, 0}, {0x00F,0x00E, 214,2334},<br>
        {0x027,0x023, 214,2334}, {0x017,0x015, 428,2334}, {0x02F,0x02A, 
        428,4668},<br>
        {0x01F,0x01C, 642,4668}, {0x037,0x031, 642,4668}, {0x04F,0x046, 749, 
        653},<br>
        {0x127,0x103, 749, 653}, {0x03F,0x038, 856,7002}, {0x24F,0x206, 915, 
        310},<br>
        {0x927,0x803, 915, 310}, {0x12F,0x10A, 963,2987}, {0x06F,0x062, 
        963,2987},<br>
        {0x927,0x003,1121, 0}, {0x24F,0x006,1121, 0}, {0x26F,0x222,1129,2644},<br>
        {0x92F,0x80A,1129,2644}, {0x05F,0x054,1177,2987}, 
        {0x137,0x111,1177,2987},<br>
        {0x26F,0x022,1335,2334}, {0x92F,0x00A,1335,2334}, 
        {0x937,0x811,1343,2644},<br>
        {0x25F,0x214,1343,2644}, {0x07F,0x070,1391,5321}, 
        {0x13F,0x118,1391,5321},<br>
        {0x097,0x085,1498, 653}, {0x16F,0x142,1498,1306}, 
        {0x25F,0x014,1549,2334},<br>
        {0x937,0x011,1549,2334}, {0x27F,0x230,1557,4978}, 
        {0x93F,0x818,1557,4978},<br>
        {0x36F,0x302,1664, 963}, {0x96F,0x842,1664, 963}, 
        {0x09F,0x08C,1712,2987},<br>
        {0x0B7,0x0A1,1712,2987}, {0x27F,0x030,1763,4668}, 
        {0x93F,0x018,1763,4668},<br>
        {0x497,0x405,1830, 310}, {0xB6F,0xA02,1830, 620}, {0x36F,0x102,1870, 
        653},<br>
        {0x96F,0x042,1870, 653}, {0x0BF,0x0A8,1926,5321}, 
        {0x17F,0x150,1926,3640},<br>
        {0xB6F,0x802,2036, 310}, {0xB6F,0x202,2036, 310}, 
        {0x49F,0x40C,2044,2644},<br>
        {0x4B7,0x421,2044,2644}, {0x37F,0x310,2092,3297}, 
        {0x97F,0x850,2092,3297},<br>
        {0x497,0x005,2242, 0}, {0xB6F,0x002,2242, 0}, {0x0DF,0x0C4,2247,1306},<br>
        {0x1B7,0x181,2247,1306}, {0x4BF,0x428,2258,4978}, 
        {0xB7F,0xA10,2258,2954},<br>
        {0x37F,0x110,2298,2987}, {0x97F,0x050,2298,2987}, {0x9B7,0x881,2413, 
        963},<br>
        {0x2DF,0x284,2413, 963}, {0x49F,0x00C,2456,2334}, 
        {0x4B7,0x021,2456,2334},<br>
        {0x0FF,0x0E0,2461,3640}, {0x1BF,0x188,2461,3640}, 
        {0xB7F,0x810,2464,2644},<br>
        {0xB7F,0x210,2464,2644}, {0x4DF,0x444,2579, 963}, {0x5B7,0x501,2579, 
        963},<br>
        {0x2DF,0x084,2619, 653}, {0x9B7,0x081,2619, 653}, 
        {0x2FF,0x2A0,2627,3297},<br>
        {0x9BF,0x888,2627,3297}, {0x4BF,0x028,2670,4668}, 
        {0xB7F,0x010,2670,2334},<br>
        {0x6DF,0x604,2745, 620}, {0xDB7,0xC01,2745, 620}, 
        {0x4FF,0x460,2793,3297},<br>
        {0x5BF,0x508,2793,3297}, {0x2FF,0x0A0,2833,2987}, 
        {0x9BF,0x088,2833,2987},<br>
        {0x6DF,0x404,2951, 310}, {0xDB7,0x401,2951, 310}, 
        {0x6FF,0x620,2959,2954},<br>
        {0xDBF,0xC08,2959,2954}, {0x4DF,0x044,2991, 653}, {0x5B7,0x101,2991, 
        653},<br>
        {0x1FF,0x1C0,2996,1959}, {0x6DF,0x204,3157, 310}, {0xDB7,0x801,3157, 
        310},<br>
        {0x3FF,0x380,3162,1616}, {0x9FF,0x8C0,3162,1616}, 
        {0x6FF,0x420,3165,2644},<br>
        {0xDBF,0x408,3165,2644}, {0x4FF,0x060,3205,2987}, 
        {0x5BF,0x108,3205,2987},<br>
        {0x5FF,0x540,3328,1616}, {0xBFF,0xA80,3328,1273}, {0x6DF,0x004,3363, 0},<br>
        {0xDB7,0x001,3363, 0}, {0x3FF,0x180,3368,1306}, {0x9FF,0x0C0,3368,1306},<br>
        {0x6FF,0x220,3371,2644}, {0xDBF,0x808,3371,2644}, 
        {0x7FF,0x700,3494,1273},<br>
        {0xDFF,0xC40,3494,1273}, {0xBFF,0x880,3534, 963}, {0xBFF,0x280,3534, 
        963},<br>
        {0x6FF,0x020,3577,2334}, {0xDBF,0x008,3577,2334}, {0xFFF,0xE00,3660, 
        930},<br>
        {0x7FF,0x500,3700, 963}, {0xDFF,0x440,3700, 963}, {0xBFF,0x080,3740, 
        653},<br>
        {0x5FF,0x140,3740,1306}, {0xFFF,0xC00,3866, 620}, {0xFFF,0x600,3866, 
        620},<br>
        {0x7FF,0x300,3906, 963}, {0xDFF,0x840,3906, 963}, {0xFFF,0x400,4072, 
        310},<br>
        {0xFFF,0xA00,4072, 620}, {0x7FF,0x100,4112, 653}, {0xDFF,0x040,4112, 
        653},<br>
        {0xFFF,0x800,4278, 310}, {0xFFF,0x200,4278, 310}<br>
        };<br>
        <br>
        const __int16 PawnFileOpening = 181;<br>
        const __int16 PawnFileEndgame = -97;<br>
        const __int16 KnightCentrOpening = 347;<br>
        const __int16 KnightCentrEndgame = 56;<br>
        const __int16 KnightRankOpening = 358;<br>
        const __int16 KnightTrapped = 3200;<br>
        const __int16 BishopCentrOpening = 147;<br>
        const __int16 BishopCentrEndgame = 49;<br>
        const __int16 BishopBackRankOpening = 251;<br>
        const __int16 BishopDiagonalOpening = 378;<br>
        const __int16 RookFileOpening = 104;<br>
        const __int16 QueenCentrOpening = 98;<br>
        const __int16 QueenCentrEndgame = 108;<br>
        const __int16 QueenBackRankOpening = 201;<br>
        const __int16 KingFileOpening = 469;<br>
        const __int16 KingCentrEndgame = 401;<br>
        <br>
        const __int16 PawnFile[8] = {-3,-1,0,1,1,0,-1,-3};<br>
        const __int16 KnightLine[8] = {-4,-2,0,1,1,0,-2,-4};<br>
        const __int16 KnightRank[8] = {-2,-1,0,1,2,3,2,1};<br>
        const __int16 BishopLine[8] = {-3,-1,0,1,1,0,-1,-3};<br>
        const __int16 RookFile[8] = {-2,-1,0,1,1,0,-1,-2};<br>
        const __int16 QueenLine[8] = {-3,-1,0,1,1,0,-1,-3};<br>
        const __int16 KingLine[8] = {-3,-1,0,1,1,0,-1,-3};<br>
        const __int16 KingFile[8] = {3,4,2,0,0,2,4,3};<br>
        <br>
        void init_evals()<br>
        { int i, j;<br>
        <br>
        for (i = 0; i &lt; 4096; i++) {<br>
        for (j = 0; j &lt; PAWN_SCORE_SIZE; j++) {<br>
        if ((i &amp; pawnscore[j].mask) == pawnscore[j].bits) {<br>
        PawnStruScore0[i] = pawnscore[j].score0;<br>
        PawnStruScore1[i] = pawnscore[j].score1;<br>
        break;<br>
        }<br>
        }<br>
        }<br>
        for (i = 0; i &lt; 64; i++) {<br>
        PieceSquareValue[WhitePawn-2][i][0] = PawnFile[i &amp; 7] * PawnFileOpening;<br>
        PieceSquareValue[WhitePawn-2][i][1] = PawnFile[i &amp; 7] * PawnFileEndgame;<br>
        PieceSquareValue[WhiteKnight-2][i][0] = KnightLine[i &amp; 7] * 
        KnightCentrOpening +<br>
        KnightLine[i &gt;&gt; 3] * KnightCentrOpening +<br>
        KnightRank[i &gt;&gt; 3] * KnightRankOpening;<br>
        PieceSquareValue[WhiteKnight-2][i][1] = KnightLine[i &amp; 7] * 
        KnightCentrEndgame +<br>
        KnightLine[i &gt;&gt; 3] * KnightCentrEndgame;<br>
        PieceSquareValue[WhiteBishop-2][i][0] = BishopLine[i &amp; 7] * 
        BishopCentrOpening +<br>
        BishopLine[i &gt;&gt; 3] * BishopCentrOpening;<br>
        PieceSquareValue[WhiteBishop-2][i][1] = BishopLine[i &amp; 7] * 
        BishopCentrEndgame +<br>
        BishopLine[i &gt;&gt; 3] * BishopCentrEndgame;<br>
        PieceSquareValue[WhiteRook-2][i][0] = RookFile[i &amp; 7] * RookFileOpening;<br>
        PieceSquareValue[WhiteRook-2][i][1] = 0;<br>
        PieceSquareValue[WhiteQueen-2][i][0] = QueenLine[i &amp; 7] * 
        QueenCentrOpening +<br>
        QueenLine[i &gt;&gt; 3] * QueenCentrOpening;<br>
        PieceSquareValue[WhiteQueen-2][i][1] = QueenLine[i &amp; 7] * 
        QueenCentrEndgame +<br>
        QueenLine[i &gt;&gt; 3] * QueenCentrEndgame;<br>
        PieceSquareValue[WhiteKing-2][i][0] = KingFile[i &amp; 7] * KingFileOpening;<br>
        PieceSquareValue[WhiteKing-2][i][1] = KingLine[i &amp; 7] * KingCentrEndgame 
        +<br>
        KingLine[i &gt;&gt; 3] * KingCentrEndgame;<br>
        }<br>
        PieceSquareValue[WhitePawn-2][35][0] += 74;<br>
        PieceSquareValue[WhitePawn-2][36][0] += 74;<br>
        PieceSquareValue[WhiteKnight-2][56][0] -= KnightTrapped;<br>
        PieceSquareValue[WhiteKnight-2][63][0] -= KnightTrapped;<br>
        for (i = 0; i &lt; 8; i++) {<br>
        PieceSquareValue[WhiteBishop-2][i][0] -= BishopBackRankOpening;<br>
        PieceSquareValue[WhiteBishop-2][(i &lt;&lt; 3) | i][0] += 
        BishopDiagonalOpening;<br>
        PieceSquareValue[WhiteBishop-2][((i &lt;&lt; 3) | i) ^ 070][0] += 
        BishopDiagonalOpening;<br>
        PieceSquareValue[WhiteQueen-2][i][0] -= QueenBackRankOpening;<br>
        }<br>
        for (i = 0; i &lt; 12; i += 2) for (j = 0; j &lt; 64; j++) {<br>
        PieceSquareValue[i+1][j][0] = -PieceSquareValue[i][j^070][0];<br>
        PieceSquareValue[i+1][j][1] = -PieceSquareValue[i][j^070][1];<br>
        }<br>
        }</p>
        <br>
        <br><br>

        

        </p>

        

        </td>
  </tr>
</table>

</body>

</html>