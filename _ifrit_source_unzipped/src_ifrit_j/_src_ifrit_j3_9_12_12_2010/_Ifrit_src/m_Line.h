#include "a_Structure.h"
#include "a_List_surplus_moves.h"

//-----------------------------------------------------------------------------------
/*
 * АВТОР Бренкман Андрей (Brenkman Andrey)
 * ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ 27.02.2009
*/
//-----------------------------------------------------------------------------------


/*
 УРОВЕНЬ МОЕГО ДОВЕРИЯ 70%

 Работа с линией главного варианта

 В целом логика такая.
 У нас есть две глобальные линии варианта - одна заполняется при погружении на глубину, 
 а другая при подъеме с  глубины. Кроме того в каждом узле есть линия лучшего варианта 
 для узла.
 Мы записываем ходы, которые делаем, погружаясь на глубину в линию текущего варианта. 
 На глубине мы перезаписываем их в линию лучшего варианта. Поднимаясь мы в каждом узле 
 запоминаем лучший для данного узла вариант. Уходя из узла, мы лучший в узле вариант 
 перезаписываем в линию лучшего варианта.

 конретнее:

 У нас есть линия варианта общая для всего поиска pv_current. 
 Ее мы заполняем, когда спускаемся на глубину public_update_PV_current.  

 Есть еще лучшая линия варианта pv_best. 
 Ее мы заполняем перед тем как выйти из узла public_update_PV_best.
 Особый случай ее обновления на максимальной глубине public_update_PV_best_max_depth.

 Так же в каждом узле есть лучшая линия варианта для данного узла p_PV_best_point.
 Ее мы обновляем каждый раз когда в узле нашли лучший ход public_update_PV_best_point.

*/

class PV_save
{

// поля класса
//////////////////////////////////////////////////////////////////////////////////////////
private:

	struct PV_line pv_current;// текущий вариант общий для всего поиска(заполняем при погружении на глубину)
	struct PV_line pv_best;// лучший вариант общий для всего поиска(заполняем при всплытии)

	__int32 save_value; // запоминаем оценку последнего выведенного варианта
	unsigned __int8 save_Depth_Max; // запоминаем глубину последнего выведенного варианта


//////////////////////////////////////////////////////////////////////////////////////////
public:

	//---------------------------------------------------------------------------
	// возвращаем лучший вариант
	struct PV_line * get_pv_best();

	//---------------------------------------------------------------------------
	// возвращаем текущий вариант
	struct PV_line * get_pv_current();

	//---------------------------------------------------------------------------
	// обновляем линию лучшего варианта в узле
	void update_PV_best_point
	(
		struct PV_line * const p_PV_best_point// лучший вариант найденный в узле
	);

	//---------------------------------------------------------------------------
	// обновляем линию лучшего варианта
	void update_PV_best
	(
		const struct PV_line * const p_PV_best_point// лучший вариант найденный в узле
	);

	//---------------------------------------------------------------------------
	// обновляем линию лучшего варианта на максимальной глубине
	void update_PV_best_max_depth
	(
		const __int32 & score,// оценка позиции в конце варианта
		const unsigned __int8 & depth// текущая глубина
	);

	//---------------------------------------------------------------------------
	// записываем ход в текущий вариант
	void update_PV_current
	(
		const unsigned __int8 & i,// номер хода в списке ходов
		const unsigned __int8 & depth,// текущая глубина
		class List_surplus_moves * const p_list_surplus_moves// список ходов
	);

	//---------------------------------------------------------------------------
	// выводим ход который обдумываем
	void print_currmove
	(
		class List_surplus_moves * const p_list_surplus_moves,//список ходов
		const unsigned __int8 nodes_0,// количество ходов на нулевой глубине
		const unsigned __int8 i,// номер хода по списку
		const unsigned __int8 Depth_Max// максимальная глубина
	);

	//---------------------------------------------------------------------------
	// выводим текущий вариант в оболочку
	void print_pv_line
	(
		const bool colour_move,// цвет печатающей стороны
		const class List_surplus_moves * const p_list_surplus_moves,// список ходов
		const struct PV_line * const p_PV_best_point,// лучший вариант
		const __int64 print_nodes,// количество узлов
		const unsigned __int8 i,// номер хода в списке
		const unsigned __int8 Depth_Max,// максимальная глубина
		const __int32 value,// оценка позиции
		const bool all_line// вывод всех линий
		//,const double time_nodes// время расчета варианта
	);

};
