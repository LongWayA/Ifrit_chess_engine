#include "Chess_bitboard.h"

//---------------------------------------------------------------------------
/*
 * АВТОР Бренкман Андрей (Brenkman Andrey)
 * ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ 2.11.2009 20.12.2009
*/
//---------------------------------------------------------------------------

/*
 УРОВЕНЬ МОЕГО ДОВЕРИЯ 50%

 перебор позиций

 включает в себя данные и методы  перебора в корне т.е. на нулевой глубине

*/


 class Search_root
{

// поля класса
//////////////////////////////////////////////////////////////////////////////////////////
private:

	//-------------------------------------------------------------------------
	__int64 nodes_root;// количество узлов
	// использую только для проверки совпадения хода с тем что прописан в линии игры
	unsigned __int8 from;// откуда ходит фигура
	unsigned __int8 to;// куда ходит фигура


//////////////////////////////////////////////////////////////////////////////////////////
public:

	//---------------------------------------------------------------------------
	// Поиск на нулевом уровне за белых
	__int32 white_root
	(
		class Chess_bitboard & bitboard,// представление доски
		class List_surplus_moves & list_surplus_moves,// список возможных ходов (всевозможные ходы из данного узла)
		__int32 alpha,//
		const __int32 beta,// 
		const unsigned __int8 depth_max// максимальная глубина
	);

	//---------------------------------------------------------------------------
	// Поиск на нулевом уровне за черных
	__int32 black_root
	(
		class Chess_bitboard & bitboard,// представление доски
		class List_surplus_moves & list_surplus_moves,// список возможных ходов (всевозможные ходы из данного узла)
		const __int32 alpha,//
		__int32 beta,// 
		const unsigned __int8 depth_max// максимальная глубина
	);

	//---------------------------------------------------------------------------
	// 
	void ini_global_loop
	(
		unsigned __int8 depth_max//
	);

	//---------------------------------------------------------------------------
	// 
	void ini_deep_time_terminate
	(
		double deep_time_terminate_v//
	);

	//---------------------------------------------------------------------------
	// возвращаем флаг остановки поиска. так если в глубине поиска получили команду
	// на остановку то передаем ее наружу
	bool get_stop_search();

	//---------------------------------------------------------------------------
	// возвращаем лучший вариант
	struct PV_line & get_pv_best();

	//---------------------------------------------------------------------------
	// возвращаем количество рассмотренных узлов
	__int64  get_nodes();

	//---------------------------------------------------------------------------
	//обнуляем количество рассмотренных узлов
	void set_nodes_in_0();

	//---------------------------------------------------------------------------
	// возвращаем откуда делается ход
	unsigned __int8 get_from();

	//---------------------------------------------------------------------------
	// возвращаем куда делается ход
	unsigned __int8 get_to();



//////////////////////////////////////////////////////////////////////////////////////////
private:

//---------------------------------------------------------------------------
//TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
// печатаем список
// глубина перебора, список
#if TEST_L
	void List_Print
	(
		int Depth,// текущая глубина
		class List_surplus_moves & list_surplus_moves// список ходов
	);
#endif
//---------------------------------------------------------------------------

};