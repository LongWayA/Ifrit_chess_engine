
#include "Chess_bitboard.h"
#include "Go.h"

#define TEST_P 0 // включаем-выключаем(1-0)  режим вывода в файл тестовой информации

// имя и дата выпуска версии
#define NAME_OF_PROGRAM_AND_DATA_OF_RELEASE "id name Ifrit_j4_1_Beta_4_1_2011"

//-----------------------------------------------------------------------------------
/* ++
 * АВТОР Бренкман Андрей (Brenkman Andrey)
 * ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ 12.06.2007  11.11.2009  1.1.2011
*/
//-----------------------------------------------------------------------------------

/*
 УРОВЕНЬ МОЕГО ДОВЕРИЯ 70%

 обрабатываем строки в рамках протокола UCI

 разбираем входящие UCI команды от графической шахматной оболочки
 основными тут являются две направления
 они друг с другом связанны только через представление доски bitboard(bit board) 
 т.е. фактически независимы друг от друга
 в первом мы инициализируем движок согласно заданной позиции
 // разбираем входящую позицию инициализируем внутреннюю доску движка   
    parse_position
 результатом является только доска  bitboard(bit board) 

 а во втором мы запускаем движок на обдумывание
 // запускаем движок на расчет позиции
    parse_go
 в результате в поток выводим ход и вариант

 конечно представление доски должно быть согласованно 
 оно описано в файле Chess_bitboard.h


 задаем функции по работе с fen протоколом

 разбираем фен - строку и инициализируем внутреннюю доску 

 инициализирующая позицию строка может быть трех видов 
 "position startpos" просто начальная позиция
 "position startpos moves b1c3 b8c6 g1f3 g8f6" начальная позиция + ходы ведущие к текущей 
 "position fen 1k1r4/8/8/8/8/8/8/3R2K1 w - - 0 1 " задание позиции через фен представление

 в результате работы класса мы получаем внутреннюю позицию соответствующую позиции
 закодированной в фен - представлении

*/

class Protocol_UCI
{

//////////////////////////////////////////////////////////////////////////////////////////
public:

	//
	class Chess_bitboard bitboard;//внутренняя битовая доска движка 

	//
	class Go go;//

//
//////////////////////////////////////////////////////////////////////////////////////////
public:

	// разбираем входящие UCI команды от графической шахматной оболочки
	void parse_protocol_UCI
	(
		const std::string string_in//входящая строка
	);


//////////////////////////////////////////////////////////////////////////////////////
private:

	//-----------------------------------------------------------------------------------
	// считывает в строке и выдает размер хеша в мегабайтах
	unsigned __int16 read_hash_size_Mb
	(
		const std::string string_in //входящая строка
	);

	//---------------------------------------------------------------------------
	// разбираем входящую фен - позицию
	void parse_position_FEN
	(
		const std::string string_in//входящая строка
	);

	//---------------------------------------------------------------------------
	// загоняем в движок ходы приводящие к текущей позиции из начальной
	void move_to_board
	(
		const __int8 move_string[]// строка содержащая ходы(7)
	);

};


