
//---------------------------------------------------------------------------
/*
 * АВТОР Бренкман Андрей (Brenkman Andrey)
 * ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ 2.11.2009 20.12.2009
*/
//---------------------------------------------------------------------------

/*
Задаем различные режимы компиляции перебора. Здесь мы можем легко
включить отключить любой метод
*/

//switch
#define SAVE_LINE 1 // при отключении(0) остается только генератор. даже останавливать движок приходится через Ctrl + Alt + Delete
           // сейчас еще придется отключать проверку на мат в модуле c_Iterative_Deepening т.е. отключать фрагмент && (flag_mate == 0)

#define FORCED 1 // включаем-выключаем(1-0) режим форсировки на взятиях

//----------------------------------
#define ALPHA_BETA_ON 1 // включаем-выключаем(1-0) режим альфа-бета отсечения
// нижеследующие три метода дают эффект только при включенном альфа-бета

// HASH -----------------------------------------------------------
#define HASH 1 // включаем-выключаем(1-0) хеш-таблицу
#define HASH_SCORE 1 // включаем-выключаем(1-0) использование оценки из хеш-таблицы

#define HASH_TEST 0 // включаем-выключаем(1-0) экстренное завершение работы движка
                    // в случае ошибки использования хода из хеш таблицы
#define HASH_TEST_SCORE 0 // включаем-выключаем(1-0) экстренное завершение работы движка
                    // в случае ошибки использования оценки из хеш таблицы.
                    // обязательно HASH_SCORE 1
#define HASH_TEST_KEY 0 // включаем-выключаем(1-0) проверку правильной генерации
                        // и изменения хеш - ключа (очень важно для тестирование на коллизии)
// ----------------------------------------------------------------

#define KILLER 1 // включаем-выключаем(1-0) киллеров

#define REPETITION 1 // включаем-выключаем(1-0) детектор повторов позиций

#define EXTENSION_CHEK 1 // включаем-выключаем(1-0) продление на шахах

// внимание! для нулевого хода и futility должно быть EXTENSION_CHEK 1
#define NULL_MOVE 1 // включаем-выключаем(1-0) режим нулевого хода
#define LMR 1 // включаем-выключаем(1-0) режим Late Move Reductions

//--------------------------------------------------------------------------------

#define TEST_L 0  // включаем-выключаем(1-0) режим вывода в файл тестовой информации
#define TEST_PRINT_ALL_LINE 0  // включаем-выключаем(1-0) режим вывода при игре тестовой информации
                      // в графическую оболочку т.е. либо лучшая линия либо все линии первого уровня.


/*
 перебор позиций

 включает в себя данные и методы основного перебора

 в нем реализованы:
 (все описания с точки зрения белых)
 часто я сам до конца не понимаю для чего что то сделал
 поэтому описания дополню глупыми вопросами самому себе :)
 -------------------

 ALPHA - BETA
 об этой эвристике написано столько что добавить мне больше нечего :)
 идея выглядит примерно так:

 альфа бета с амортизацией отказов
 int AlphaBeta (pos, depth, alpha, beta) {
	if (depth == 0) return Evaluate(pos);
	best = -INFINITY;
	succ = Successors(pos);
	while (!Empty(succ)) {
		pos = RemoveOne(succ);
		value = -AlphaBeta(pos, depth - 1, -beta, -alpha);
		if (value > best) best = value;
	    if (value > alpha) alpha = value;
        if (alpha >= beta) return alpha;
	}
	return best;
 }
 --------------------------------------------------------------

 NULL MOVE
 если до дна не меньше двух полу ходов если ход не взятие и не шах и если не главный вариант
 и если мы не в нулевом ходе т.е. не допускаем вызов нулевого в нулевом 
 то 
 мы пропускаем свой ход и если даже при такой форе противник не может улучшить оценку
 найденную в поиске до этого то эту ветку можно подрезать
 ?
 --------------------------------------------------------------

 LMR
 применяем эвристику если до дна не меньше трех полу ходов если не шах и если не в главном варианте
 четыре первых хода: хеш-ход, лучшее взятие, два киллера не редуцируются
 все взятия не редуцируются
 все остальные ходы редукция на один полу ход
 ?
 --------------------------------------------------------------

 FUTILITY PRUNING
 если не взятие не шах и не в главной линии и не в нулевом поиске то
 на предпоследней глубине т.е. depth_max - depth == FUTILITY_DEPTH(равна 1)
 если 
 оценка - FUTILITY_MARGIN(равна 100) >= beta return beta
 т.е. если позицию не спасает даже фора в пешку то мы просто возвращаем бету
 таким образом перебор сокращаем на полу ход и не проводим форсированный поиск.
 ?

*/