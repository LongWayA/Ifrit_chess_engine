#include "a_Structure.h"

#define TEST_P 0 // включаем-выключаем(1-0)  режим вывода в файл тестовой информации
// не забываем что надо включить и печать битбоарда(bit board) TEST_B в файле d_Bitboard_gen.h TEST_B

// имя и дата выпуска версии
//#define NAME_OF_PROGRAM_AND_DATA_OF_RELEASE "id name Ifrit_j3_3full_Beta_29_6_2010"
#define NAME_OF_PROGRAM_AND_DATA_OF_RELEASE "id name Ifrit_j3_3_Beta_3_7_2010"

//-----------------------------------------------------------------------------------
/* ++
 * АВТОР Бренкман Андрей (Brenkman Andrey)
 * ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ 12.06.2007  11.11.2009
*/
//-----------------------------------------------------------------------------------

/*
 УРОВЕНЬ МОЕГО ДОВЕРИЯ 70%

 обрабатываем строки в рамках протокола UCI

 разбираем входящие UCI команды от графической шахматной оболочки
 основными тут являются две направления
 они друг с другом связанны только через представление доски bitboard(bit board) 
 т.е. фактически независимы друг от друга
 в первом мы инициализируем движок согласно заданной позиции
 // разбираем входящую позицию инициализируем внутреннюю доску движка   
    parse_position(bitboard,string_in); 
 результатом является только доска  bitboard(bit board) 

 а во втором мы запускаем движок на обдумывание
 // запускаем движок на расчет позиции
    parse_go(bitboard,string_in,three_position);
 в результате в поток выводим ход и вариант

 конечно представление доски должно быть согласованно 
 оно описано в файле a_Structure.h
*/

namespace PROTOCOLUCI
{
	// разбираем входящие UCI команды от графической шахматной оболочки
	void public_parse_protokol_UCI
	(
		struct T_Bitboard * p_bitboard,//доска 
		char string_in[]//входящая строка
	);

	//////////////////////////////////////////////////////////////////////////////////////
	//private:

	//-----------------------------------------------------------------------------------
	// считывает в строке и выдает размер хеша в мегабайтах
	unsigned __int16 read_hash_size_Mb
	(
		const char string_in[]
	);

	//-----------------------------------------------------------------------------------
	// есть ли в строке искомая подстрока
	bool string_equal
	(
		const char s1[], 
		const char s2[]
	);

	//-----------------------------------------------------------------------------------
	// есть ли в начале строки искомая подстрока
	bool string_start_with
	(
		const char s1[],
		const char s2[]
	);

}


