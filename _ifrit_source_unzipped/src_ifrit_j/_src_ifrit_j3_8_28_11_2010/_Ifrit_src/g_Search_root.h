#include "a_Structure.h"
#include "a_Chess_bitboard.h"

//---------------------------------------------------------------------------
/*
 * АВТОР Бренкман Андрей (Brenkman Andrey)
 * ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ 2.11.2009 20.12.2009
*/
//---------------------------------------------------------------------------

/*
 УРОВЕНЬ МОЕГО ДОВЕРИЯ 50%

 перебор позиций

 включает в себя данные и методы  перебора в корне т.е. на нулевой глубине

*/


namespace ROOTSEARCH
{
	//---------------------------------------------------------------------------
	// Поиск на нулевом уровне за белых
	__int32 public_white_root
	(
		class Chess_bitboard * const p_bitboard,// представление доски
		class List_surplus_moves & list_surplus_moves,// список возможных ходов (всевозможные ходы из данного узла)
		__int32 alpha,//
		const __int32 beta,// 
		const unsigned __int8 depth_max// максимальная глубина
	);

	//---------------------------------------------------------------------------
	// Поиск на нулевом уровне за черных
	__int32 public_black_root
	(
		class Chess_bitboard * const p_bitboard,// представление доски
		class List_surplus_moves & list_surplus_moves,// список возможных ходов (всевозможные ходы из данного узла)
		const __int32 alpha,//
		__int32 beta,// 
		const unsigned __int8 depth_max// максимальная глубина
	);

	//---------------------------------------------------------------------------
	// 
	void public_ini_global_loop
	(
		unsigned __int8 depth_max//
	);

	//---------------------------------------------------------------------------
	// 
	void public_ini_deep_time_terminate
	(
		double deep_time_terminate_v//
	);

	//---------------------------------------------------------------------------
	// возвращаем флаг остановки поиска. так если в глубине поиска получили команду
	// на остановку то передаем ее наружу
	bool public_get_stop_search();

	//---------------------------------------------------------------------------
	// возвращаем лучший вариант
	struct T_PV * public_get_pv_best();

	//---------------------------------------------------------------------------
	// возвращаем количество рассмотренных узлов
	__int64  public_get_nodes();

	//---------------------------------------------------------------------------
	//обнуляем количество рассмотренных узлов
	void public_set_nodes_in_0();

	//---------------------------------------------------------------------------
	// возвращаем откуда делается ход
	unsigned __int8 public_get_from();

	//---------------------------------------------------------------------------
	// возвращаем куда делается ход
	unsigned __int8 public_get_to();



//////////////////////////////////////////////////////////////////////////////////////////
//private:

//---------------------------------------------------------------------------
//TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
// печатаем список
// глубина перебора, список
#if TEST_L
	void List_Print
	(
		int Depth,// текущая глубина
		class List_surplus_moves * p_list_surplus_moves// список ходов
	);
#endif
//---------------------------------------------------------------------------

}