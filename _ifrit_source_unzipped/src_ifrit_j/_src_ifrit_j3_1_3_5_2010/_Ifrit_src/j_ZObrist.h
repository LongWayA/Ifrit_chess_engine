#include "a_Structure.h"

#define TEST_H 0 // включаем-выключаем(1-0) режим вывода в файл тестовой информации

//---------------------------------------------------------------------------
/*
 * АВТОР Бренкман Андрей (Brenkman Andrey)
 * СОЗДАН 2.05.10
 * ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ
*/
//---------------------------------------------------------------------------

/*
 реализуем ZObrist-ключи
*/

// этот макрос прикольный но как он вписывается в мое правило кодирования??
// а правило у меня такое что никаких макросов!
#define U64(u) (u##ui64)

namespace ZOBRIST{

//////////////////////////////////////////////////////////////////////////////////////////
//public:

// РАБОТА С ХЕШ - КЛЮЧОМ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//---------------------------------------------------------------------------
// меняем ключ во время хода
void Modification_random_key(bool  colour_figure,// цвет ходящей стороны
							 unsigned __int8 i,// номер хода по списку
							 struct T_list_surplus_moves * p_list_surplus_moves,// список ходов
							 struct T_Bitboard * p_bitboard,// представление доски
                             struct T_undo undo[]//информация для отката хода
							 );

//---------------------------------------------------------------------------
// инициализируем ключ начальной позиции
void Start_position_random_key(struct T_Bitboard * p_bitboard// представление доски
							   );

//---------------------------------------------------------------------------
// каждой возможной позиции каждой возможной фигуры 
// присваиваем случайное число
void Ini_random_piese_key();

//---------------------------------------------------------------------------
// генерируем случайный 64 битный ключ
unsigned __int64 rand_64();


// ПОВТОРЫ ПОЗИЦИЙ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//---------------------------------------------------------------------------
// возвращаем количество ходов в строке игры переданной из оболочки
__int32 get_save_cnt_move();

//---------------------------------------------------------------------------
// запоминаем хеш-ключ на текущей глубине
// нужно для детектора повторов в линии варианта
void Save_hash_three(unsigned __int64 key,// хеш-ключ
					 unsigned __int8 depth // глубина
					 );

//---------------------------------------------------------------------------
// запоминаем хеш-ключ для текущего хода
// нужно для детектора повторов в линии партии переданной оболочкой
void Save_hash_string_moves(unsigned __int64 key,// хеш-ключ
					        unsigned __int16 cnt_move // счетчик ходов
					        );

//---------------------------------------------------------------------------
// анализируем линию ключей полученную из строки партии. если видим совпадение то возвращаем 1 иначе 0
// конечно совпадение не должно быть трехкратным ведь тогда это уже ничья
bool Analysis_hash_string_moves(unsigned __int8 depth // глубина
						        );

//---------------------------------------------------------------------------
// инициализируем хеш-массив повторов возрастающими числами что бы исключить ложное срабатывание
void Ini_hash_three();

//---------------------------------------------------------------------------
// инициализируем хеш-массив повторов возрастающими числами что бы исключить ложное срабатывание
void Ini_hash_string_moves();

//---------------------------------------------------------------------------

};//namespace ZOBRIST