
/// АВТОР Бренкман Андрей (Brenkman Andrey)
/// ПОСЛЕДНЕЕ ИЗМЕНЕНИЕ 11.12.2010 17.08.2011 19.09.2011 26.09.2011
/// УРОВЕНЬ МОЕГО ДОВЕРИЯ 70%

#ifndef EVALUATE_CONST_H
#define EVALUATE_CONST_H

namespace EVALUATE_CONSTANTS
{

/// System by Max Euwe and Hans Kramer
/// (http://chessprogramming.wikispaces.com/Material)

/// QUEEN =  1000
/// ROOK =   550
/// BISHOP = 350
/// KNIGHT = 350


/// Many strong chess programs including Fruit use a different generic scale
/// (http://chessprogramming.wikispaces.com/Material)

/// QUEEN =  1200
/// ROOK =   600
/// BISHOP = 400
/// KNIGHT = 400

/// Larry Kaufman proposed some modifications based on statistics
/// (http://chessprogramming.wikispaces.com/Material)

/// QUEEN =  975
/// ROOK =   500
/// BISHOP = 325
/// KNIGHT = 325

	/// значения для обсчета материала(по Larry Kaufman)
	const unsigned __int16 KING = 0;     /// король  (было 90000)
	const unsigned __int16 QUEEN = 975; /// ферзь
	const unsigned __int16 ROOK = 500;   /// ладья 
	const unsigned __int16 BISHOP = 325; /// слон 
	const unsigned __int16 KNIGHT = 325; /// конь 
	const unsigned __int16 PAWN = 100;   /// пешка 

	///// значения для обсчета материала(по Larry Kaufman) + пешка
	//const unsigned __int16 KING = 0;     /// король  (было 90000)
	//const unsigned __int16 QUEEN = 1075; /// ферзь
	//const unsigned __int16 ROOK = 600;   /// ладья 
	//const unsigned __int16 BISHOP = 425; /// слон 
	//const unsigned __int16 KNIGHT = 425; /// конь 
	//const unsigned __int16 PAWN = 100;   /// пешка 

	/// массив весов фигур: 0 - 0, 1 - пешка, 2 - конь, 
	/// 3- слон, 4 - ладья, 5 - ферзь, 6 - король;
	const unsigned __int16 KOD[7] = 
	{
		0,PAWN,KNIGHT,BISHOP,ROOK,QUEEN,KING, 
	};



///                PST


	/*

	A8(56) B8(57) C8(58) D8(59) E8(60) F8(61) G8(62) H8(63)
	A7(48) B7(49) C7(50) D7(51) E7(52) F7(53) G7(54) H7(55)
	A6(40) B6(41) C6(42) D6(43) E6(44) F6(45) G6(46) H6(47)
	A5(32) B5(33) C5(34) D5(35) E5(36) F5(37) G5(38) H5(39)

	A4(24) B4(25) C4(26) D4(27) E4(28) F4(29) G4(30) H4(31)
	A3(16) B3(17) C3(18) D3(19) E3(20) F3(21) G3(22) H3(23)
	A2(8)  B2(9)  C2(10) D2(11) E2(12) F2(13) G2(14) H2(15)
	A1(0)  B1(1)  C1(2)  D1(3)  E1(4)  F1(5)  G1(6)  H1(7)

	при записи 
	eval = eval + test[from];

	для фигуры на Н1 т.е. from = 7 test[from] = 7

	КАРТА МАССИВА ПСТ ЗЕРКАЛЬНО ОТОБРАЖЕНА ОТНОСИТЕЛЬНО ГОРИЗОНТА !

	непосредственно это выглядит так:

	test[A8] = 56 test[B1] = 57 ... test[G1] = 62 test[H1] = 63 	
	......
	......
	test[A1] = 0  test[B1] = 1  ... test[G1] = 6  test[H1] = 7 

	т.о. когда мы смотрим на массив пст то мы видим не доску а доску которая
	зеркально отображена относительно горизонтальной линии
	конечно это неудобно и это надо учитывать когда задаем таблицы пст.

	*/

	/// использую для тестирования считывания таблиц pst
	const __int8 test[] =
	{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9,10,11,12,13,14,15,
		16,17,18,19,20,21,22,23,
		24,25,26,27,28,29,30,31,

		32,33,34,35,34,37,38,39,
		40,41,42,43,44,45,46,47,
		48,49,50,51,52,53,54,55,
		56,57,58,59,60,61,62,63,
	};


// некоторые коэффициенты взяты из 
// Evaluation functions in Rybka 1.0 Beta and Rybka 2.3.2a (RybkaEvalCompare.pdf)

/// КОРОЛЬ

	/// король должен стремиться спрятаться
	/// в начале и середине партии

	const __int16 pozicion_king_white[] =
	{
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,

		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407
	};
// копия
	const __int16 pozicion_king_black[] =
	{
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,

		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407,
		1407,1876,938,0,0,938,1876,1407
	};

	/// в эндшпиле король должен стремиться к центру
	const __int16 pozicion_king_white_end[] =
	{
		-2406,-1604,-1203,-802,-802,-1203,-1604,-2406,
		-1604, -802, -401,   0,   0, -401, -802,-1604,
		-1203, -401,    0, 401, 401,    0, -401,-1203,
		 -802,    0,  401, 802, 802,  401,    0, -802,

		 -802,    0,  401, 802, 802,  401,    0, -802,
		-1203, -401,    0, 401, 401,    0, -401,-1203,
		-1604, -802, -401,   0,   0, -401, -802,-1604,
		-2406,-1604,-1203,-802,-802,-1203,-1604,-2406
	};
// копия
	const __int16 pozicion_king_black_end[] =
	{
		-2406,-1604,-1203,-802,-802,-1203,-1604,-2406,
		-1604, -802, -401,   0,   0, -401, -802,-1604,
		-1203, -401,    0, 401, 401,    0, -401,-1203,
		 -802,    0,  401, 802, 802,  401,    0, -802,

		 -802,    0,  401, 802, 802,  401,    0, -802,
		-1203, -401,    0, 401, 401,    0, -401,-1203,
		-1604, -802, -401,   0,   0, -401, -802,-1604,
		-2406,-1604,-1203,-802,-802,-1203,-1604,-2406
	};

/// ФЕРЗЬ

	/// пишем мобильность ферзя на полях 
	const __int16 pozicion_queen_white[] =
	{
		-789,-593,-495,-397,-397,-495,-593,-789,
		-392,-196, -98,   0,   0, -98,-196,-392,
		-294, -98,   0,  98,  98,   0, -98,-294,
		-196,   0,  98, 196, 196,  98,   0,-196,

		-196,   0,  98, 196, 196,  98,   0,-196,
		-294, -98,   0,  98,  98,   0, -98,-294,
		-392,-196, -98,   0,   0, -98,-196,-392,
		-588,-392,-294,-196,-196,-294,-392,-588
	};
// копия
	const __int16 pozicion_queen_black[] =
	{
		-588,-392,-294,-196,-196,-294,-392,-588,
		-392,-196, -98,   0,   0, -98,-196,-392,
		-294, -98,   0,  98,  98,   0, -98,-294,
		-196,   0,  98, 196, 196,  98,   0,-196,

		-196,   0,  98, 196, 196,  98,   0,-196,
		-294, -98,   0,  98,  98,   0, -98,-294,
		-392,-196, -98,   0,   0, -98,-196,-392,
		-789,-593,-495,-397,-397,-495,-593,-789
	};

/// ЛАДЬЯ

	/// пишем мобильность ладьи на полях 
	const __int16 pozicion_rook_white[] =
	{
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,

		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208
	};
// копия
	const __int16 pozicion_rook_black[] =
	{
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,

		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208,
		-208,-104,0,104,104,0,-104,-208
	};


/// СЛОН

	/// пишем мобильность слона на полях 
	const __int16 pozicion_bishop_white[] =
	{
		-755,-839,-692,-545,-545,-692,-839,-755,
		-588,  84,-147,   0,   0,-147,  84,-588,
		-441,-147, 378, 147, 147, 378,-147,-441,
		-294,   0, 147, 672, 672, 147,   0,-294,

		-294,   0, 147, 672, 672, 147,   0,-294,
		-441,-147, 378, 147, 147, 378,-147,-441,
		-588,  84,-147,   0,   0,-147,  84,-588,
		-504,-588,-441,-294,-294,-441,-588,-504
	};
// копия
	const __int16 pozicion_bishop_black[] =
	{
		-504,-588,-441,-294,-294,-441,-588,-504,
		-588,  84,-147,   0,   0,-147,  84,-588,
		-441,-147, 378, 147, 147, 378,-147,-441,
		-294,   0, 147, 672, 672, 147,   0,-294,

		-294,   0, 147, 672, 672, 147,   0,-294,
		-441,-147, 378, 147, 147, 378,-147,-441,
		-588,  84,-147,   0,   0,-147,  84,-588,
		-755,-839,-692,-545,-545,-692,-839,-755
	};


/// КОНЬ

	/// пишем мобильность коня в данном поле
	const __int16 pozicion_knigh_white[] =
	{
		-3492,-2798,-2104, -1757, -1757,-2104,-2798,-3492,
		-2440,-1746,-1052,  -705,  -705,-1052,-1746,-2440,
		-1388, -694,    0,   347,   347,    0, -694,-1388,
		 -683,   11,  705,  1052,  1052,  705,   11, -683,

		 -325,  369, 1063, 1410,  1410,  1063,  369, -325,
		 -314,  380, 1074, 1421,  1421,  1074,  380, -314,
		-1366, -672,   22,  369,   369,    22, -672,-1366,
		-5618,-1724,-1030, -683,  -683, -1030,-1724,-5618
	};
// копия
	const __int16 pozicion_knigh_black[] =
	{
		-5618,-1724,-1030, -683,  -683, -1030,-1724,-5618,
		-1366, -672,   22,  369,   369,    22, -672,-1366,
		 -314,  380, 1074, 1421,  1421,  1074,  380, -314,
		 -325,  369, 1063, 1410,  1410,  1063,  369, -325,

		 -683,   11,  705,  1052,  1052,  705,   11, -683,
		-1388, -694,    0,   347,   347,    0, -694,-1388,
		-2440,-1746,-1052,  -705,  -705,-1052,-1746,-2440,
		-3492,-2798,-2104, -1757, -1757,-2104,-2798,-3492
	};


/// ПЕШКА
/// сейчас вдруг подумал что пешки это душа атаки и основа обороны :)

	/// король в центре 
	const __int16 pozicion_pawn_king_in_center_white[] =
	{
		  0,0,0,0,0,0,0,0,
		  0,0,0,181,181,0,0,0,
		  -543,-181,0,181,181,0,-181,-543,
		  -543,-181,0,181,181,0,-181,-543,

		  -543,-181,0,255,255,0,-181,-543,
		  -543,-181,0,181,181,0,-181,-543,
		  -543,-181,0,181,181,0,-181,-543,
		  -543,-181,0,181,181,0,-181,-543
	}; 
// копия
	const __int16 pozicion_pawn_king_in_center_black[] =
	{
		  -543,-181,0,181,181,0,-181,-543,
		  -543,-181,0,181,181,0,-181,-543,
		  -543,-181,0,181,181,0,-181,-543,
		  -543,-181,0,255,255,0,-181,-543,

		  -543,-181,0,181,181,0,-181,-543,
		  -543,-181,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,0,0,
		  0,0,0,0,0,0,0,0
	};


	/// когда короткая рокировка приходят в движение пешки с другого фланга
	const __int16 pozicion_pawn_king_in_oo_white[] =
	{
		  0,0,0,0,0,0,0,0,
		  0,0,0,181,181,0,0,0,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,

		  0,0,0,255,255,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543
	};

	const __int16 pozicion_pawn_king_in_oo_black[] =
	{
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,

		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,0,0,
		  0,0,0,0,0,0,0,0
	};


	/// когда длинная рокировка приходят в движение пешки с другого фланга
	const __int16 pozicion_pawn_king_in_ooo_white[] =
	{
		  0,0,0,0,0,0,0,0,
		  0,0,0,181,181,0,0,0,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,

		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543
	};

	const __int16 pozicion_pawn_king_in_ooo_black[] =
	{
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,

		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,-181,-543,
		  0,0,0,181,181,0,0,0,
		  0,0,0,0,0,0,0,0
	};


	///бонус пешкам за продвижение. используем для эндшпиля
	const __int16 pozicion_pawn_white_end[] =
	{
		  0,0,0,0,0,0,0,0,
		  0,0,0,181,181,0,0,0,
		  0,0,0,181,181,0,0,0,
		  0,0,0,181,181,0,0,0,

		  0,0,0,255,255,0,0,0,
		  0,0,0,255,255,0,0,0,
		  0,0,0,255,255,0,0,0,
		  0,0,0,255,255,0,0,0
	};

	const __int16 pozicion_pawn_black_end[] =
	{
		  0,0,0,255,255,0,0,0,
		  0,0,0,255,255,0,0,0,
		  0,0,0,255,255,0,0,0,
		  0,0,0,255,255,0,0,0,

		  0,0,0,181,181,0,0,0,
		  0,0,0,181,181,0,0,0,
		  0,0,0,181,181,0,0,0,
		  0,0,0,0,0,0,0,0
	};

	///бонус проходным пешкам за продвижение
	const __int16 pozicion_perspective_pawn_white_end[] =
	{
		   0,  0,  0,  0,  0,  0,  0,  0,
		   0,  0,  0,  0,  0,  0,  0,  0,               
		  181, 181, 181, 181, 181, 181, 181, 181,
		  255, 255, 255, 255, 255, 255, 255, 255,

		 1600,1600,1600,1600,1600,1600,1600,1600,
		 3200,3200,3200,3200,3200,3200,3200,3200,
		 6400,6400,6400,6400,6400,6400,6400,6400,  
		   0,  0,  0,  0,  0,  0,  0,  0  
	};

	const __int16 pozicion_perspective_pawn_black_end[] =
	{
		    0,   0,   0,   0,   0,   0,   0,   0, 
		 6400,6400,6400,6400,6400,6400,6400,6400,   
		 3200,3200,3200,3200,3200,3200,3200,3200,  
		 1600,1600,1600,1600,1600,1600,1600,1600,

		  255, 255, 255, 255, 255, 255, 255, 255,
		  181, 181, 181, 181, 181, 181, 181, 181,
		   0,  0,  0,  0,  0,  0,  0,  0,         
		   0,  0,  0,  0,  0,  0,  0,  0          
	};

// некоторые коэффициенты взяты из Стрелки Осипова Юрия Ивановича

	/// безопасность короля
	const unsigned __int8 PENALTY_CASTLING_O_O   = 30;/// бонус за короткую рокировку
	const unsigned __int8 PENALTY_CASTLING_O_O_O = 20;/// бонус за длинную рокировку
	//const unsigned __int8 PENALTY_SHIELD = 20;/// бонус за прикрытие короля спереди пешкой
	const unsigned __int16 PENALTY_PAWNN = 158;/// штраф за сдвоенные пешки
	const unsigned __int16 PERSPECTIVE_PAWNN = 320;/// проходные пешки бонус за каждую вертикаль (макс 3)

	//const unsigned __int8 CONTROL_SQUARE = 1;/// коэффициент захвата пространства безличный
	const unsigned __int16 CONTROL_SQUARE_QUEEN = 54;/// коэффициент захвата пространства ферзем
	const unsigned __int16 CONTROL_SQUARE_ROOK = 84;/// коэффициент захвата пространства ладьей
	const unsigned __int16 CONTROL_SQUARE_BISHOP = 149;/// коэффициент захвата пространства слоном
	const unsigned __int16 CONTROL_SQUARE_KNIGHT = 14;/// коэффициент захвата пространства конем

	//const unsigned __int8 ATAK_KING = 20;/// коэффициент атаки на короля
	const unsigned __int16 ATAK_KING_QUEEN = 532;/// коэффициент атаки на короля
	const unsigned __int16 ATAK_KING_ROOK = 665;/// коэффициент атаки на короля
	const unsigned __int16 ATAK_KING_BISHOP = 418;/// коэффициент атаки на короля
	const unsigned __int16 ATAK_KING_KNIGHT = 941;/// коэффициент атаки на короля

	/// это момент когда может вылезти король и начинаем гнать пешки вперед
	const unsigned __int16 RUBIKON = 
		//0; // test
		QUEEN + ROOK + KING;///рубеж перехода в эндшпиль(две ладьи и слон и пешка)1600
						/// как только материала у врага меньше то эндшпиль   

}

using namespace EVALUATE_CONSTANTS;

#endif // !defined EVALUATE_CONST_H