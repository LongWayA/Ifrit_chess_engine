Некоторые размышления об игре Ифрита.

Итак, первый этап пройден.
Добавлены все методы, которые я запланировал (кроме сортировки по истории). Играет она плохо. Слишком маленькая глубина перебора. Может, для этой схемы это предел?
А, может, реализация слишком кривая. Ответить на эти вопросы попытаемся в этой статье. 

1) ГЕНЕРАТОР ПОЗИЦИЙ.
 
1. Он состоит из:
   1> Генератора избыточных ходов.
   2> Реализатора ходов.
   3> Детектора шахов.

Сейчас генератор выдает около миллиона позиций в секунду. Конечно, бывают генераторы со скоростью и 3, и 10. Т.е. тут есть куда стремиться. Вот только нужно ли мне это?

Оболочка показывает от 50 до 150 kN/s (тысяч позиций в секунду). Скорость, конечно, довольно маленькая, учитывая к тому же примитивность оценки. Но это показывает оболочка, мне надо скорость мерить самому. Измерил сам. Скорость где-то 200 kN/s. У других движков: 300 – 700. 

В любом случае, разброс скоростей в рамках одного порядка. В итоге, я не думаю, что увеличение скорости даже в шесть раз (150*6=900)  даст мне хотя бы полуход. Хотя, стоит признать, что чем глубже мы забираемся, тем скорость существеннее влияет на время обдумывания. Разница есть – думаем мы шесть минут или минуту. 

2. Запись варианта и оценка позиции интересуют нас только с точки зрения скорости.


2) ПУТИ РЕШЕНИЯ ПРОБЛЕМЫ ПЕРЕБОРА

1. Идти можно разными путями. Можно идти путем ускорения счета, а можно путем уменьшения объема счета.
  1> В первом случае мы имеем полный перебор. Генерируем все возможные позиции и оцениваем их. Очевидно, что при одинаковой глубине перебора мы имеем битвы оценок. Победит та прога, у которой лучше оценка. Тут мы четко понимаем, что оценка имеет принципиальное значение. 
  2> Основная проблема в том, что с глубиной количество позиций увеличивается по экспоненте. Таким образом, и скорость у нас должна расти по экспоненте, иначе будет расти по экспоненте время. А последнее неприемлемо, так как время у нас ограниченно (где-то 5 мин на партию). 
  3> Очевидно, что увеличивать скорость по экспоненте мы не можем. Хотя бы потому, что ресурсы машины ограниченны и программы, как правило, используют одинаковые или соизмеримые ресурсы. Таким образом, путем увеличения скорости счета задачу не решить, хотя и тут есть миниум, ниже которого опускаться не стоит. Скорость должна быть одного порядка со скоростью других прог.

2. Посмотрим на это с цифрами. Для определенности возьмем начальную позицию.

Глубина перебора   Количество узлов       Необходимая скорость для перебора за 1 секунду
3                  9 322                  ~9       kN/s   
4                  206 603                ~206       kN/s   
5                  5 072 212              ~5 072     kN/s   
6                  124 132 536            ~124 132   kN/s
7                  3 320 034 396          ~3 320 034 kN/s
(8,9,10 вычислял сам)
8                  88 319 013 352         ~88 319 013     kN/s
9                  2 527 849 247 519      ~2 527 849 247  kN/s
10                 71 880 708 959 936     ~71 880 708 959 kN/s

Другими словами для перебора за секунду на:

– глубину 4 нужна скорость 206 тысяч узлов секунду;
– глубину 5 нужна скорость 5 миллионов  72 тысячи узлов в секунду;
– глубину 6 нужна скорость 124 миллиона 132 тысячи узлов в секунду;
– глубину 7 нужна скорость 3 миллиарда (!) 320 миллионов 034 тысячи узлов в секунду.

Таким образом, мы наглядно видим, что на сегодня:
– глубина 5 реальна для высокоскоростного кода на хорошей машине; 
– на лучших машинах при лучшей реализации может быть и можно дотянуться до глубины 6, хотя не уверен;
– а вот глубина 7 совершенно нереальна, даже в ближайшем будущем.

Ифрит выдает скорость ~206 kN/s, так что его глубина – 4. А учитывая форсировки, вообще – 3 :). Это, конечно, маловато и надо бороться за скорость не ниже ~300 kN/s. 

3. Нам остается единственный путь – это отсечение некоторых веток. В программе я использую два метода сокращения перебора – это альфа-бета и нулевой ход.

3) АЛЬФА-БЕТА ОПТИМИЗАЦИЯ
1. Для альфа-беты главным является порядок ходов. Теоретически, при идеальном порядке мы должны рассмотреть корень из числа позиций полного перебора, говоря по-другому, этот метод может дать увеличение глубины в два раза.
Для 6 нужно перебрать 11 141 узлов
Для 7 нужно перебрать 57 619 узлов
Для 8 нужно перебрать 297 185 узлов
Для 9 нужно перебрать 1 589 921 узлов
Для 10 нужно перебрать 8 478 249 узлов
2. Основной вывод такой: при скорости ~206 kN/s идеальная альфа-бета позволит достичь глубины 8 за 1,4 сек. Глубины 9 за 7,7 сек. Глубины 10 за 41 сек. Причем, полному перебору для просчета с такой скоростью на глубину 10 понадобилось бы где-то порядка 11 лет непрерывного счета!  Следует уточнить, что под скоростью тут мы имеем в виду скорость перебора узлов полного перебора без учета скорости и количества узлов в форсированных вариантах.
Таким образом, даже при идеальной альфа-бете с такой скоростью за секунду мы сможем дойти только до 7 глубины.
3. Сравним, что мы имеем на сегодня, с идеалом.
Глубина перебора  Идеальное время  Ифрит29_2 (только альфа-бета)
7                 0,27(сек)            4 сек
8                 1,4(сек)             1 м 6 сек
9                 7,7(сек)             11 м 05 сек

Глубина перебора  Идеальный перебор  Ифрит 29_2(только альфа-бета) перебор
7                 57 619            203 919
8                 297 185           6 294 498
9                 1 589 921         105 944 151


4) НУЛЕВОЙ ХОД
 1. Эту эвристику я сразу невзлюбил :) Главный ее недостаток в том, что она эвристика. Если при альфа-бета оптимизации мы знаем, что при правильной реализации программа сделает тот же ход и выведет тот же вариант, что и при полном переборе, только существенно быстрее, то нулевка отсекает ветки, исходя из собственных соображений. Это делает невозможной оптимизацию оценки и изменяет стиль игры.
 2. Тем не менее, похоже, что без нее мне не обойтись. Дело в том, что она существенно увеличивает глубину перебора. А глубина при тактических осложнениях является решающим аргументом.

5) НУЛЕВОЕ ОКНО
 Пока соображений нет.

