<!DOCTYPE html>
<html>

<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<!-- Copyright (c) 2006-2019, Brenkman Andrey and/or its affiliates. All rights reserved. -->
<title>Cogitations about Ifrit</title>
</head>

<body>

<table border="0" cellspacing="1" width="100%" id="AutoNumber1"  bgcolor="#CCCCFF">
  <tr>
    <td width="100%">
    <table border="0" cellspacing="1" width="100%" id="AutoNumber2">
      <tr>
        <td width="*">
        <h2 align="center">Некоторые размышления об игре Ифрита(Ifrit_C29_2)<br>
                           Статья от 10.01.2008</h2>
        </td>
        <td width="25%">
        <p align="center"><a href="/Ifrit_chess_engine/index.html">на главную страницу</a></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">

        

        <p align="justify">&nbsp;</p>

        

        <p align="justify">
        Итак, первый этап пройден.<br>
        Добавлены все методы, которые я запланировал (кроме сортировки по 
        истории). Играет он не очень сильно. Слишком маленькая глубина перебора. Может, 
        для этой схемы это предел?<br>
        А, может, реализация слишком кривая. Ответить на эти вопросы попытаемся 
        в этой статье. <br>
        <br>
        1) ГЕНЕРАТОР ПОЗИЦИЙ.<br>
        <br>
        1. Он состоит из:<br>
        1&gt; Генератора избыточных ходов.<br>
        2&gt; Реализатора ходов.<br>
        3&gt; Детектора шахов.<br>
        <br>
        Сейчас генератор выдает около миллиона позиций в секунду. Конечно, 
        бывают генераторы со скоростью и 3, и 10. Т.е. тут есть куда стремиться. 
        Вот только нужно ли мне это?<br>
        <br>
        Оболочка показывает от 50 до 150 kN/s (тысяч позиций в секунду). 
        Скорость, конечно, довольно маленькая, учитывая к тому же примитивность 
        оценки. Но это показывает оболочка, мне надо скорость мерить самому. 
        Измерил сам. Скорость где-то 200 kN/s. У других движков: 300 – 700. <br>
        <br>
        В любом случае, разброс скоростей в рамках одного порядка. В итоге, я не 
        думаю, что увеличение скорости даже в шесть раз (150*6=900) даст мне 
        хотя бы полуход. Хотя, стоит признать, что чем глубже мы забираемся, тем 
        скорость существеннее влияет на время обдумывания. Разница есть – думаем 
        мы шесть минут или минуту. <br>
        <br>
        2. Запись варианта и оценка позиции интересуют нас только с точки зрения 
        скорости.<br>
        <br>
        <br>
        2) ПУТИ РЕШЕНИЯ ПРОБЛЕМЫ ПЕРЕБОРА<br>
        <br>
        1. Идти можно разными путями. Можно идти путем ускорения счета, а можно 
        путем уменьшения объема счета.<br>
        1&gt; В первом случае мы имеем полный перебор. Генерируем все возможные 
        позиции и оцениваем их. Очевидно, что при одинаковой глубине перебора мы 
        имеем битвы оценок. Победит та прога, у которой лучше оценка. Тут мы 
        четко понимаем, что оценка имеет принципиальное значение. <br>
        2&gt; Основная проблема в том, что с глубиной количество позиций 
        увеличивается по экспоненте. Таким образом, и скорость у нас должна 
        расти по экспоненте, иначе будет расти по экспоненте время. А последнее 
        неприемлемо, так как время у нас ограниченно (где-то 5 мин на партию).
        <br>
        3&gt; Очевидно, что увеличивать скорость по экспоненте мы не можем. Хотя бы 
        потому, что ресурсы машины ограниченны и программы, как правило, 
        используют одинаковые или соизмеримые ресурсы. Таким образом, путем 
        увеличения скорости счета задачу не решить, хотя и тут есть миниум, ниже 
        которого опускаться не стоит. Скорость должна быть одного порядка со 
        скоростью других прог.<br>
        <br>
        2. Посмотрим на это с цифрами. Для определенности возьмем начальную 
        позицию.<br>
        <br>
        Глубина перебора&nbsp;&nbsp;&nbsp; Количество узлов&nbsp;&nbsp;&nbsp;&nbsp; 
        Необходимая скорость для перебора за 1 секунду<br>
        3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        9 322&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ~9 kN/s <br>
        4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        206 603&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ~206 kN/s <br>
        5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        5 072 212&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ~5 072 kN/s <br>
        6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        124 132 536&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ~124 132 kN/s<br>
        7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        3 320 034 396&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ~3 320 034 kN/s<br>
        (8,9,10 вычислял сам)<br>
        8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        88 319 013 352&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ~88 319 013 kN/s<br>
        9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        2 527 849 247 519&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ~2 527 849 247 kN/s<br>
        10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        71 880 708 959 936&nbsp;&nbsp;&nbsp;&nbsp; ~71 880 708 959 kN/s<br>
        <br>
        Другими словами для перебора за секунду на:<br>
        <br>
        – глубину 4 нужна скорость 206 тысяч узлов секунду;<br>
        – глубину 5 нужна скорость 5 миллионов 72 тысячи узлов в секунду;<br>
        – глубину 6 нужна скорость 124 миллиона 132 тысячи узлов в секунду;<br>
        – глубину 7 нужна скорость 3 миллиарда (!) 320 миллионов 034 тысячи 
        узлов в секунду.<br>
        <br>
        Таким образом, мы наглядно видим, что на сегодня:<br>
        – глубина 5 реальна для высокоскоростного кода на хорошей машине; <br>
        – на лучших машинах при лучшей реализации может быть и можно дотянуться 
        до глубины 6, хотя не уверен;<br>
        – а вот глубина 7 совершенно нереальна, даже в ближайшем будущем.<br>
        <br>
        Ифрит выдает скорость ~206 kN/s, так что его глубина – 4. А учитывая 
        форсировки, вообще – 3 :). Это, конечно, маловато и надо бороться за 
        скорость не ниже ~300 kN/s. <br>
        <br>
        3. Нам остается единственный путь – это отсечение некоторых веток. В 
        программе я использую два метода сокращения перебора – это альфа-бета и 
        нулевой ход.<br>
        <br>
        3) АЛЬФА-БЕТА ОПТИМИЗАЦИЯ<br>
        1. Для альфа-беты главным является порядок ходов. Теоретически, при 
        идеальном порядке мы должны рассмотреть корень из числа позиций полного 
        перебора, говоря по-другому, этот метод может дать увеличение глубины в 
        два раза.<br>
        Для 6 нужно перебрать 11 141 узлов<br>
        Для 7 нужно перебрать 57 619 узлов<br>
        Для 8 нужно перебрать 297 185 узлов<br>
        Для 9 нужно перебрать 1 589 921 узлов<br>
        Для 10 нужно перебрать 8 478 249 узлов<br>
        2. Основной вывод такой: при скорости ~206 kN/s идеальная альфа-бета 
        позволит достичь глубины 8 за 1,4 сек. Глубины 9 за 7,7 сек. Глубины 10 
        за 41 сек. Причем, полному перебору для просчета с такой скоростью на 
        глубину 10 понадобилось бы где-то порядка 11 лет непрерывного счета! 
        Следует уточнить, что под скоростью тут мы имеем в виду скорость 
        перебора узлов полного перебора без учета скорости и количества узлов в 
        форсированных вариантах.<br>
        Таким образом, даже при идеальной альфа-бете при такой скорости за 
        секунду мы сможем дойти только до 7 глубины. Если же мы поднимем 
        скорость до 300 kN/s, то можно будет ожидать глубину 8.<br>
        <br>
        4)СОРТИРОВКИ<br>
        1. В виду того, что для альфа-беты порядок ходов принципиален, особое 
        значение приобретают сортировки ходов.<br>
        Рассмотрим различные методы.<span lang="ru"><br>
        Выводим в следующем порядке: 
        глубина, время перебора, количество узлов, скорость перебора, оценка, 
        вариант</span></p>

        

        <p align="justify">
        <br>
        Альфа-бета без сортировки: <br>
        7/7&nbsp;&nbsp;&nbsp; 01:31&nbsp;&nbsp;&nbsp; 15.780.730<br>
        <br>
        Киллер – это самая мощная сортировка: <br>
        7/7&nbsp;&nbsp;&nbsp; 00:16&nbsp;&nbsp;&nbsp; 2.271.275&nbsp;&nbsp;&nbsp; 
        167.845&nbsp;&nbsp;&nbsp; +0,92 e2e3 a7a5 Bf1c4 Nb8c6 Ng1e2 Ng8f6 
        Bc4xf7+<br>
        8/8&nbsp;&nbsp;&nbsp; 01:41&nbsp;&nbsp;&nbsp; 15.502.822&nbsp; 182.253&nbsp;&nbsp;&nbsp; 
        -0,77 g2g3 a7a5 Bf1g2 Ra8a6 Nb1c3 Ra6g6 Ng1f3 Rg6xg3<br>
        <br>
        Далее сортировка по взятиям (взятия выводим наверх):<br>
        7/7&nbsp;&nbsp;&nbsp; 00:43&nbsp;&nbsp;&nbsp; 6.561.135&nbsp;&nbsp;&nbsp; 
        173.304&nbsp;&nbsp;&nbsp; +0,92 e2e3 a7a5 Bf1c4 Nb8c6 Ng1e2 Ng8f6 
        Bc4xf7+<br>
        8/8&nbsp;&nbsp;&nbsp; 04:56&nbsp;&nbsp;&nbsp; 44.709.148&nbsp; 177.208&nbsp;&nbsp;&nbsp; 
        -0,77 g2g3 a7a5 Bf1g2 Ra8a6 Nb1c3 Ra6g6 Ng1f3 Rg6xg3<br>
        <br>
        Далее хеш: <br>
        6/6&nbsp;&nbsp;&nbsp; 00:06&nbsp;&nbsp;&nbsp; 1.157.998&nbsp; 193.516&nbsp;&nbsp;&nbsp; 
        -0,72 a2a4 g7g6 b2b4 Bf8h6 Nb1c3 Bh6xd2+<br>
        7/7&nbsp;&nbsp;&nbsp; 00:45&nbsp;&nbsp;&nbsp; 6.702.890&nbsp;&nbsp; 
        173.045&nbsp;&nbsp; +0,92 e2e3 a7a5 Bf1c4 Nb8c6 Ng1e2 Ng8f6 Bc4xf7+<br>
        <br>
        Далее сортировка по порядку: ферзь, ладья, слон, конь, король, пешки:<br>
        7/7&nbsp;&nbsp;&nbsp; 00:49&nbsp;&nbsp;&nbsp; 7.204.299&nbsp;&nbsp;&nbsp; 
        173.598&nbsp;&nbsp;&nbsp; +0,92 e2e3 a7a5 Bf1c4 Nb8c6 Ng1e2 Ng8f6 
        Bc4xf7+<br>
        8/8&nbsp;&nbsp;&nbsp; 09:58&nbsp;&nbsp;&nbsp; 100.368.643 182.894&nbsp;&nbsp;&nbsp; 
        -0,77 g2g3 a7a5 Bf1g2 Ra8a6 Nb1c3 Ra6g6 Ng1f3 Rg6xg3<br>
        <br>
        2. Если применить все методы сортировки, то получим.<br>
        Альфа-бета + хеш + киллер (новая сортировка) + сортировка по взятиям + 
        сортировка в следующем порядке: ферзь, <br>
        ладья, слон, конь, король, пешки:<br>
        7/7&nbsp;&nbsp;&nbsp; 00:12&nbsp;&nbsp;&nbsp; 1.353.303&nbsp;&nbsp;&nbsp; 
        140.837&nbsp;&nbsp; +0,92 e2e3 a7a5 Bf1c4 Nb8c6 Ng1e2 Ng8f6 Bc4xf7+<br>
        8/8&nbsp;&nbsp;&nbsp; 01:01&nbsp;&nbsp;&nbsp; 6.926.790&nbsp;&nbsp;&nbsp; 
        140.600&nbsp;&nbsp; -0,77 g2g3 a7a5 Bf1g2 Ra8a6 Nb1c3 Ra6g6 Ng1f3 Rg6xg3<br>
        <br>
        При максимальной сортировке мы получили в 23 раза больше узлов, чем при 
        идеальной сортировке.<br>
        6.926.790 узлов вместо 297 185 узлов. <br>
        <br>
        3. Отдельно рассмотрим негаскаут.<br>
        Альфа-бета + хеш + киллер (новая сортировка) + сортировка по взятиям + 
        сортировка в следующем порядке: ферзь, <br>
        ладья, слон, конь, король, пешки + негаскаут:<br>
        <br>
        6/6&nbsp;&nbsp;&nbsp; 00:03&nbsp;&nbsp;&nbsp; 338.214&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        133.629&nbsp;&nbsp;&nbsp; -0,72 a2a4 g7g6 b2b4 Bf8h6 Nb1c3 Bh6xd2+<br>
        7/7&nbsp;&nbsp;&nbsp; 00:12&nbsp;&nbsp;&nbsp; 1.390.746&nbsp;&nbsp; 
        159.801&nbsp;&nbsp;&nbsp; +0,92 e2e3 a7a5 Bf1c4 Nb8c6 Ng1e2 Ng8f6 
        Bc4xf7+<br>
        8/8&nbsp;&nbsp;&nbsp; 00:55&nbsp;&nbsp;&nbsp; 6.124.158&nbsp;&nbsp;&nbsp; 
        140.183&nbsp;&nbsp;&nbsp; -0,77 g2g3 a7a5 Bf1g2 Ra8a6 Nb1c3 Ra6g6 Ng1f3 
        Rg6xg3<br>
        Без негаскаута:<br>
        8/8 01:01 6.926.790 140.600 -0,77 g2g3 a7a5 Bf1g2 Ra8a6 Nb1c3 Ra6g6 
        Ng1f3 Rg6xg3<br>
        <br>
        Незначительный эффект от негаскаута есть. Так что есть смысл оставить 
        этот метод. Он тем лучше работает, чем точнее сортировка. Если 
        сортировки нет, то от него только хуже.<br>
        Это и понятно ведь мы смотрим первый ход с полным окном, остальные 
        пытаемся отсечь нулевым. Если не получается, то смотрим с полным окном.<br>
        Вообще-то эффект очень незначителен, так что можно и без него. Возможно, 
        просто реализация у меня кривая.<br>
        <br>
        <br>
        5) НУЛЕВОЙ ХОД<br>
        Альфа-бета + хеш + киллер (новая сортировка) + сортировка по взятиям + 
        сортировка в следующем порядке: ферзь, <br>
        ладья, слон, конь, король, пешки + негаскаут + нулевой ход:<br>
        <br>
        6/6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:01&nbsp;&nbsp;&nbsp; 66.475&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        -0,05 a2a4 Nb8c6 Ng1f3 e7e5 Nb1c3 Bf8e7<br>
        7/7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:02&nbsp;&nbsp;&nbsp; 99.827&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        138.841&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +0,19 a2a4 Nb8c6 Ng1f3 e7e6 d2d4 
        Bf8e7 Bc1d2<br>
        8/8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:09&nbsp;&nbsp;&nbsp; 838.007&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        119.187&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -0,03 a2a4 Nb8c6 Nb1c3 Nc6d4 e2e3 
        Nd4f5 e3e4 Ng8f6<br>
        9/9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:25&nbsp;&nbsp;&nbsp; 2.058.082&nbsp;&nbsp;&nbsp;&nbsp; 
        127.752&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +0,22 e2e4 Nb8c6 Bf1b5 Nc6d4 Bb5e2 
        Ng8f6 Nb1c3 Nd4xe2 Ng1xe2<br>
        10/10&nbsp; 02:49&nbsp;&nbsp;&nbsp; 17.883.526&nbsp;&nbsp; 124.016&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        +0,14 g2g3 Nb8c6 Bf1g2 Nc6d4 Ng1f3 Nd4xf3+ Bg2xf3 d7d5 00 Bc8d7<br>
        <br>
        Без нулевого хода:<br>
        6/6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:03&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        338.214&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 133.629&nbsp;&nbsp;&nbsp; 
        -0,72 a2a4 g7g6 b2b4 Bf8h6 Nb1c3 Bh6xd2+<br>
        7/7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        1.390.746&nbsp;&nbsp;&nbsp;&nbsp; 159.801&nbsp;&nbsp;&nbsp; +0,92 e2e3 
        a7a5 Bf1c4 Nb8c6 Ng1e2 Ng8f6 Bc4xf7+<br>
        8/8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        6.124.158&nbsp;&nbsp;&nbsp;&nbsp; 140.183&nbsp;&nbsp;&nbsp; -0,77 g2g3 
        a7a5 Bf1g2 Ra8a6 Nb1c3 Ra6g6 Ng1f3 Rg6xg3<br>
        <br>
        Ускорение от нулевого хода просто потрясающее. Для глубины 8 при 
        идеальной сортировке нужно рассмотреть 297.185 узлов,<br>
        мы рассмотрели 838.007 узлов, всего в 2,8 раза больше.<br>
        <br>
        Для глубины 10 при идеальной сортировке нужно рассмотреть 8 478 249 
        узлов, мы рассмотрели 17.883.526 узлов, всего в 2,1 раза больше.<br>
        <br>
        Мы вплотную приблизились к идеалу достижимому простым упорядочиванием 
        ходов.<br>
        Тем не менее, мы не достигли идеала альфа-беты даже с такой мощной 
        эвристикой, как нулевой ход.<br>
        <br>
        Другой вопрос – даст ли нулевой ход прирост при идеальной альфа бете.<br>
        <br>
        &nbsp;</p>

        

        <p><b><font size="4">Добавление от 14.06.2010</font></b></p>
        <p>Конечно же, нулевой ход - это отдельная эвристика, не имеющая 
        отношения ни к альфа-бета оптимизации, ни к сортировке ходов. </p>
        <p>В данной статье я не очень удачно выразил свою мысль. Сейчас попробую 
        это исправить.</p>
        <p>Если мы используем а-б с идеальной сортировкой для глубины 10 
        полуходов, нужно перебрать 8 478 249 узлов.</p>
        <p>У меня же а-б с моей сортировкой + эвристика нулевого хода для 
        глубины 10 полуходов перебрала 17.883.526 узлов. Т.е. в 2.1 раза больше.</p>
        <p>Поэтому я и написал, что даже при помощи такой мощной эвристики как 
        нулевой ход, я не смог подойти к количеству узлов, которое дает одна 
        альфа-бета, но с идеальным упорядочением ходов. Т.е. альфа-бета + 
        эвристика нулевого хода оказалась хуже, чем просто альфа-бета, но с 
        идеальным упорядочением.</p>
        <p>Другими словами реализация сортировки ходов на тот момент была такая 
        слабая, что даже помощь другой эвристики не помогла исправить ситуацию. 
        Т.е. достигнуть нужных показателей по количеству узлов для данной 
        глубины.</p>
        <p>Последний вопрос который я задал, зависит ли эффективность эвристики 
        нулевого хода от качества реализации эвристики альфа –бета. Возможно, 
        они где-то пересекаются. </p>
        <p>Надо сказать, что и в данный момент я не могу уверенно ответить на 
        этот вопрос.</p>

        

        <p align="justify">
        <br><br>

        

        </p>

        

        </td>
  </tr>
</table>

</body>

</html>