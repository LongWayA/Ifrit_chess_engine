<!DOCTYPE html>
<html>

<head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<!-- Copyright (c) 2006-2019, Brenkman Andrey and/or its affiliates. All rights reserved. -->
<title>MiniMax</title>
</head>

<body>

<table border="0" cellspacing="1" width="100%" id="AutoNumber1"  bgcolor="#CCCCFF">
  <tr>
    <td width="100%">
    <table border="0" cellspacing="1" width="100%" id="AutoNumber2">
      <tr>
        <td width="*">
        <h2 align="center"><span lang="ru">MiniMax (Полный перебор)</span></h2>
        </td>
        <td width="25%">
        <p align="center"><a href="0_0_Structure_Ifrit_b.htm">на главную страницу</a></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">
<br>
Самое начало - это полный перебор. Из данной позиции возможно несколько 
легальных ходов, мы их делаем и получаем позиции следующего уровня и все 
повторяется. Следует обратить внимание, что мы сначала генерируем список ходов 
возможных из данной позиции, а уже потом делаем эти ходы, получая новые позиции. 
Делается это по нескольким причинам. Во-первых, довольно накладно хранить в 
памяти дерево позиций. Гораздо эффективнее хранить не позиции, а ходы, которые 
привели к данной позиции. И, во-вторых, после генерации ходов при использовании 
а-б отсечения их нужно будет сортировать, и многие ходы будут отброшены без 
генерации позиций, т.е. без делания этого хода. Но даже при максимально 
компактной записи ходов мы не можем держать в памяти все дерево игры, потому что 
оно растет по экспоненте. Приведем цифры, потому что в данном случае они 
красноречивее всяких слов:<br>
<br>
Для начальной позиции<br>
Глубина перебора&nbsp;&nbsp; Количество узлов<br>
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
9 322 <br>
4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
206 603 <br>
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
5 072 212 <br>
6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
124 132 536 <br>
7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
3 320 034 396 <br>
(8,9,10 вычислял сам)<br>
8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
88 319 013 352 <br>
9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
2 527 849 247 519 <br>
10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
71 880 708 959 936 <br>
<br>
Мы знаем, что 1 Мб - это 1 048 576 байт. Допустим, у нас ход закодирован в целом 
числе int, а это 4 байт. Значит, в одном Мб можно сохранить 262144 ходов. Это 
значит, что для глубины 5 полуходов нам потребуется 19 Мб. А для 6 полуходов уже 
~ 473Мб. И так далее по экспоненте.<br>
<br>
Поэтому при переборе мы держим в памяти только одну ветку ту, которую в данный 
момент исследуем. Тогда даже при глубине 10 нам потребуется примерно 20*10 = 400 
ходов. Такое дерево легко помещается даже в кэше процессора.<br>
<br>
В результате алгоритм таков. Берем позицию и генерируем из нее список ходов, 
дальше берем ход из списка и делаем его, т.е. создаем позицию следующего уровня 
и т.д. <br>
Позиции на предельной глубине оцениваем. И в каждом узле находим лучшую оценку. 
Понятно, что белые будут пытаться найти максимум, а черные минимум. Поэтому 
алгоритм и называется минимаксом. Это все очень просто, но как это описать?!<br>
Пойду самым простым путем – приведу алгоритм полного перебора.<br>
<br>
Поиск за белых{<br>
Оценку за белых, т.е. локальный максимум устанавливаем в минимум.<br>
Если достигли максимально заданной глубины, то вызываем статическую оценку 
позиции<br>
Генерируем список легальных ходов<br>
Просматриваем список {<br>
Делаем ход за белых<br>
Вызываем Поиск за черных, в результате которого получаем оценку хода<br>
Берем назад ход за белых<br>
Сравниваем оценку хода с нашим максимумом в узле, если больше, то делаем ее 
максимумом<br>
}<br>
Возвращаем максимум в узле<br>
}<br>
<br>
Поиск за черных {<br>
Оценку за черных, т.е. локальный минимум устанавливаем в максимум.<br>
Если достигли максимально заданной глубины, то вызываем статическую оценку 
позиции<br>
Генерируем список легальных ходов<br>
Просматриваем список {<br>
Делаем ход за черных<br>
Вызываем Поиск за белых, в результате которого получаем оценку хода<br>
Берем назад ход за черных<br>
Сравниваем оценку хода с нашим минимумом в узле, если меньше то делаем ее 
минимумом.<br>
}<br>
Возвращаем минимум в узле<br>
}<br>
<br>
Описание получилось какое то неконкретное, поэтому приведу код на си образном 
языке и в дальнейшем алгоритм словами описывать не буду (учите Си++!).<br>
<br>
int AlphaBetaWhite(int depth) поиск за белых<br>
{ <br>
&nbsp; int tmp;<br>
&nbsp; int max = -INFINITY;// устанавливаем локальный максимум в минус 
бесконечность<br>
&nbsp; if(depth &lt;= 0) return Evaluate();// на предельной глубине считаем оценку 
позиции<br>
&nbsp; GenerateWhite ();// генерируем список ходов за белых<br>
&nbsp; while(moveList) списки ходов локальные, т.е. действуют только в узле<br>
&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp; MakeMoveWhite;//делаем ход<br>
&nbsp;&nbsp;&nbsp;&nbsp; tmp = AlphaBetaBlack(depth-1); <br>
&nbsp;&nbsp;&nbsp;&nbsp; UnMakeMoveWhite;// откатываем ход<br>
&nbsp;&nbsp;&nbsp;&nbsp; if(tmp &gt; max) max = tmp; // белые ищут локальный 
максимум<br>
&nbsp; }<br>
&nbsp; return max;<br>
}<br>
<br>
int AlphaBetaBlack (int depth) поиск за черных<br>
{ <br>
&nbsp; int tmp;<br>
&nbsp; int min = INFINITY; <br>
&nbsp; if(depth &lt;= 0) return Evaluate(); <br>
&nbsp; GenerateBlack (); <br>
&nbsp; while(moveList) <br>
&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp; MakeMoveBlack;<br>
&nbsp;&nbsp;&nbsp;&nbsp; tmp = AlphaBetaWhite (depth-1); <br>
&nbsp;&nbsp;&nbsp;&nbsp; UnMakeMoveBlack;<br>
&nbsp;&nbsp;&nbsp;&nbsp; if(tmp &lt; min) min = tmp; // черные ищут локальный 
минимум<br>
&nbsp; }<br>
&nbsp; return min;<br>
}<br>
<br>
<br>
Очевидно, что полный перебор крайне неэффективен. И действительно для перебора 
за секунду на:<br>
– глубину 4 нужна скорость 206 тысяч узлов секунду;<br>
– глубину 5 нужна скорость 5 миллионов 72 тысячи узлов в секунду;<br>
– глубину 6 нужна скорость 124 миллиона 132 тысячи узлов в секунду;<br>
– глубину 7 нужна скорость 3 миллиарда (!) 320 миллионов 034 тысячи узлов в 
секунду.<br>
<br>
Как видно глубины поиска просто смешные, а требуемое быстродействие совершенно 
неприличное. И тут не поможет никакая оптимизация.<br>
На нынешних процессорах такая программа будет играть на глубине 4, а в лучшем 
случае 5 полуходов, т.е. смотреть на ~2 хода :)<br>
Именно поэтому на полном переборе останавливаться никак нельзя и следует идти 
дальше. А дальше у нас alpha-beta оптимизация перебора.<br>
<br>
Тестировать его элементарно. В интернете есть данные, сколько узлов получается 
на конкретной глубине для конкретной позиции. В крайнем случае, можно взять 
цифры, что я привел выше.<br>
<br>
Надо уточнить, что у меня схема несколько сложнее той, что приведена выше. Дело 
в том, что генератор списка ходов не проверяет легитимность полученных позиций, 
если сказать просто это значит, что в результате некоторых ходов король может 
оказаться под шахом.<br>
Для того что бы проверить под шахом ли король генератору пришлось бы двигать 
фигуры, так как есть такое явление как вскрытый шах. <br>
С рокировкой дело еще сложнее, так как при рокировке король не должен бегать 
через битые поля. Но так как тут не надо двигать фигуры, то легитимность 
рокировки проверяется внутри генератора.<br>
<br>
В результате схема несколько усложняется.<br>
<br>
int AlphaBetaWhite (int depth)// поиск за белых<br>
{ <br>
&nbsp; int tmp;<br>
&nbsp; int max = -INFINITY;// устанавливаем локальный максимум в минус 
бесконечность<br>
&nbsp; if(depth &lt;= 0) return Evaluate ();// на предельной глубине считаем оценку 
позиции<br>
&nbsp; GenerateWhite ();// генерируем список избыточных ходов за белых<br>
&nbsp; while(moveList)// списки ходов локальные, т.е. действуют только в узле<br>
&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp; MakeMoveWhite;// делаем ход<br>
&nbsp;&nbsp;&nbsp;&nbsp; if (King_white_check !=0 ){// проверяем под шахом ли 
король<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UnMakeMoveWhite;// откатываем ход, так как 
позиция некорректная <br>
&nbsp;&nbsp;&nbsp;&nbsp; }else{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmp = AlphaBetaBlack(depth-1); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UnMakeMoveWhite;// откатываем ход<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(tmp &gt; max) max = tmp; // белые ищут 
локальный максимум<br>
&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp; }<br>
&nbsp; return max;<br>
}<br>
<br>
Аналогично для черных.<br>
В дальнейшем изложении буду опираться на упрощенную схему.<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

</td>
  </tr>
</table>

</body>

</html>